var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.098,1,0.56]],["body/interfaces/Coordinates.html",[0,0.176,1,0.926,2,0.355,3,0.303,4,0.255,5,0.255,6,0.349,7,0.469,8,0.303,9,0.893,10,1.216,11,1.216,12,1.035,13,0.692,14,0.048,15,0.558,16,0.311,17,0.607,18,0.607,19,0.607,20,0.774,21,0.894,22,0.868,23,0.607,24,0.79,25,0.607,26,0.79,27,0.533,28,0.79,29,0.79,30,0.45,31,0.255,32,1.024,33,0.607,34,0.828,35,0.941,36,0.533,37,0.355,38,0.607,39,0.533,40,0.533,41,0.533,42,0.533,43,0.409,44,1.111,45,0.723,46,0.79,47,0.533,48,0.409,49,0.533,50,0.723,51,0.409,52,0.802,53,0.533,54,0.525,55,0.536,56,0.355,57,0.752,58,0.828,59,1.015,60,0.607,61,0.469,62,0.941,63,0.469,64,1.04,65,0.469,66,0.469,67,0.915,68,0.723,69,0.695,70,0.896,71,0.896,72,0.659,73,1.164,74,1.263,75,0.828,76,0.79,77,0.79,78,0.469,79,0.928,80,1.111,81,0.355,82,0.469,83,0.378,84,0.409,85,0.355,86,0.533,87,0.469,88,0.533,89,0.303,90,0.607,91,0.695,92,0.79,93,0.926,94,0.409,95,0.766,96,0.409,97,0.469,98,0.828,99,0.915,100,0.695,101,0.469,102,0.533,103,0.723,104,0.469,105,0.533,106,0.469,107,0.533,108,0.828,109,0.355,110,0.469,111,0.739,112,0.469,113,0.469,114,0.525,115,0.355,116,0.469,117,0.469,118,1.04,119,0.469,120,0.409,121,0.469,122,0.533,123,0.469,124,0.533,125,0.533,126,0.941,127,0.469,128,0.802,129,0.695,130,0.828,131,0.469,132,0.469,133,0.533,134,0.469,135,0.879,136,0.167,137,0.469,138,0.355,139,0.533,140,0.469,141,0.469,142,0.695,143,0.469,144,0.469,145,0.915,146,1.111,147,0.533,148,0.941,149,0.533,150,1.088,151,0.533,152,0.79,153,1.401,154,0.695,155,0.695,156,0.79,157,0.79,158,0.79,159,0.79,160,0.79,161,0.79,162,0.533,163,0.79,164,0.469,165,1.147,166,0.409,167,0.409,168,0.355,169,0.533,170,0.607,171,0.533,172,0.409,173,0.79,174,1.094,175,0.533,176,0.533,177,0.79,178,0.533,179,0.695,180,0.533,181,0.533,182,0.409,183,0.533,184,0.469,185,0.533,186,0.79,187,0.951,188,0.533,189,0.469,190,0.469,191,0.355,192,1.111,193,0.533,194,0.79,195,0.533,196,0.533,197,0.695,198,0.533,199,0.533,200,0.533,201,0.533,202,0.469,203,0.79,204,0.915,205,1.04,206,0.79,207,0.79,208,0.533,209,1.111,210,1.04,211,0.533,212,0.533,213,0.409,214,0.355,215,1.035,216,0.533,217,0.79,218,0.533,219,0.723,220,0.533,221,0.941,222,0.854,223,0.533,224,0.533,225,0.533,226,0.533,227,0.533,228,0.533,229,0.533,230,0.533,231,0.533,232,0.79,233,0.79,234,0.533,235,0.79,236,0.79,237,0.533,238,0.533,239,0.533,240,0.533,241,0.533,242,0.941,243,0.941,244,0.941,245,0.533,246,0.941,247,0.941,248,0.533,249,0.941,250,0.79,251,0.79,252,0.79,253,0.533,254,0.79,255,0.79,256,0.533,257,0.79,258,0.79,259,0.533,260,0.79,261,0.941,262,0.533,263,0.533,264,0.533,265,0.409,266,0.951,267,0.607,268,0.533,269,0.355,270,0.409,271,0.915,272,0.533,273,0.533,274,0.79,275,0.79,276,0.533,277,0.533,278,0.533,279,0.533,280,0.941,281,0.533,282,0.469,283,1.04,284,0.533,285,1.04,286,0.533,287,0.533,288,0.533,289,0.533,290,0.533,291,0.533,292,0.469,293,0.79,294,0.533,295,0.533,296,0.533,297,0.533,298,0.533,299,0.533,300,0.533,301,0.533,302,0.79,303,0.533,304,0.533,305,0.533,306,0.533,307,0.533,308,0.941,309,0.533,310,0.533,311,0.533,312,0.533,313,0.723,314,0.533,315,0.409,316,0.533,317,0.533,318,0.533,319,0.533,320,0.533,321,0.533,322,0.695,323,0.533,324,0.533,325,0.533,326,0.533,327,0.533,328,0.533,329,0.533,330,0.533,331,0.533,332,1.285,333,0.533,334,0.533,335,0.533,336,0.533,337,0.533,338,0.533,339,0.533,340,0.533,341,0.409,342,0.79,343,0.533,344,0.533,345,0.533,346,0.533,347,0.533,348,1.04,349,0.941,350,0.533,351,0.533,352,0.533,353,0.971,354,0.533,355,0.533,356,0.533,357,0.533,358,0.533,359,0.533,360,0.79,361,0.533,362,0.533,363,0.533,364,0.533,365,0.533,366,0.533,367,1.111,368,0.79,369,0.79,370,0.533,371,0.533,372,0.79,373,0.79,374,0.79,375,0.533,376,0.941,377,0.79,378,0.533,379,0.533,380,0.533,381,0.533,382,1.04,383,1.111,384,1.04,385,0.941,386,0.941,387,0.533,388,1.111,389,1.04,390,0.533,391,0.79,392,0.79,393,0.79,394,0.79,395,0.533,396,0.533,397,0.533,398,0.533,399,0.533,400,0.533,401,0.533,402,0.533,403,0.533,404,0.533,405,0.533,406,0.533,407,0.79,408,0.533,409,0.79,410,0.533,411,0.533,412,0.533,413,0.533,414,0.533,415,0.533,416,0.533,417,0.533,418,0.533,419,0.533,420,0.533,421,0.533,422,0.533,423,0.533,424,0.533,425,0.79,426,0.79,427,0.79,428,0.79,429,0.79,430,0.79,431,0.533,432,0.79,433,0.79,434,0.533,435,0.533,436,0.025,437,0.025]],["title/modules/DragAndDropModule.html",[438,1.329,439,1.505]],["body/modules/DragAndDropModule.html",[2,0.746,3,0.638,4,0.537,5,0.537,6,0.406,14,0.047,15,0.67,31,0.537,54,0.906,55,0.638,56,0.746,57,0.775,83,0.537,84,1.093,436,0.041,437,0.041,438,2.042,439,2.666,440,4.412,441,4.412,442,4.135,443,3.347,444,4.135,445,4.412,446,4.412]],["title/interfaces/DragAxis.html",[0,0.098,58,0.641]],["body/interfaces/DragAxis.html",[0,0.176,1,0.894,2,0.355,3,0.303,4,0.255,5,0.255,6,0.349,7,0.469,8,0.303,9,0.893,10,1.216,11,1.216,12,0.988,13,0.692,14,0.048,15,0.558,16,0.311,17,0.607,18,0.607,19,0.607,20,0.774,21,0.894,22,0.868,23,0.607,24,0.79,25,0.607,26,0.79,27,0.533,28,0.79,29,0.79,30,0.45,31,0.255,32,1.024,33,0.607,34,0.828,35,0.941,36,0.533,37,0.355,38,0.607,39,0.533,40,0.533,41,0.533,42,0.533,43,0.409,44,1.111,45,0.723,46,0.79,47,0.533,48,0.409,49,0.533,50,0.723,51,0.409,52,0.802,53,0.533,54,0.525,55,0.536,56,0.355,57,0.752,58,0.915,59,1.05,60,0.607,61,0.469,62,0.941,63,0.469,64,1.04,65,0.469,66,0.469,67,0.915,68,0.723,69,0.695,70,0.896,71,0.896,72,0.659,73,1.164,74,1.263,75,0.828,76,0.79,77,0.79,78,0.469,79,0.928,80,1.111,81,0.355,82,0.469,83,0.378,84,0.409,85,0.355,86,0.533,87,0.469,88,0.533,89,0.303,90,0.607,91,0.695,92,0.79,93,0.926,94,0.409,95,0.766,96,0.409,97,0.469,98,0.828,99,0.915,100,0.695,101,0.469,102,0.533,103,0.723,104,0.469,105,0.533,106,0.469,107,0.533,108,0.828,109,0.355,110,0.469,111,0.739,112,0.469,113,0.469,114,0.525,115,0.355,116,0.469,117,0.469,118,1.04,119,0.469,120,0.409,121,0.469,122,0.533,123,0.469,124,0.533,125,0.533,126,0.941,127,0.469,128,0.802,129,0.695,130,0.828,131,0.469,132,0.469,133,0.533,134,0.469,135,0.879,136,0.167,137,0.469,138,0.355,139,0.533,140,0.469,141,0.469,142,0.695,143,0.469,144,0.469,145,0.915,146,1.111,147,0.533,148,0.941,149,0.533,150,1.088,151,0.533,152,0.79,153,1.401,154,0.695,155,0.695,156,0.79,157,0.79,158,0.79,159,0.79,160,0.79,161,0.79,162,0.533,163,0.79,164,0.469,165,1.147,166,0.409,167,0.409,168,0.355,169,0.533,170,0.607,171,0.533,172,0.409,173,0.79,174,1.094,175,0.533,176,0.533,177,0.79,178,0.533,179,0.695,180,0.533,181,0.533,182,0.409,183,0.533,184,0.469,185,0.533,186,0.79,187,0.951,188,0.533,189,0.469,190,0.469,191,0.355,192,1.111,193,0.533,194,0.79,195,0.533,196,0.533,197,0.695,198,0.533,199,0.533,200,0.533,201,0.533,202,0.469,203,0.79,204,0.915,205,1.04,206,0.79,207,0.79,208,0.533,209,1.111,210,1.04,211,0.533,212,0.533,213,0.409,214,0.355,215,1.035,216,0.533,217,0.79,218,0.533,219,0.723,220,0.533,221,0.941,222,0.854,223,0.533,224,0.533,225,0.533,226,0.533,227,0.533,228,0.533,229,0.533,230,0.533,231,0.533,232,0.79,233,0.79,234,0.533,235,0.79,236,0.79,237,0.533,238,0.533,239,0.533,240,0.533,241,0.533,242,0.941,243,0.941,244,0.941,245,0.533,246,0.941,247,0.941,248,0.533,249,0.941,250,0.79,251,0.79,252,0.79,253,0.533,254,0.79,255,0.79,256,0.533,257,0.79,258,0.79,259,0.533,260,0.79,261,0.941,262,0.533,263,0.533,264,0.533,265,0.409,266,0.951,267,0.607,268,0.533,269,0.355,270,0.409,271,0.915,272,0.533,273,0.533,274,0.79,275,0.79,276,0.533,277,0.533,278,0.533,279,0.533,280,0.941,281,0.533,282,0.469,283,1.04,284,0.533,285,1.04,286,0.533,287,0.533,288,0.533,289,0.533,290,0.533,291,0.533,292,0.469,293,0.79,294,0.533,295,0.533,296,0.533,297,0.533,298,0.533,299,0.533,300,0.533,301,0.533,302,0.79,303,0.533,304,0.533,305,0.533,306,0.533,307,0.533,308,0.941,309,0.533,310,0.533,311,0.533,312,0.533,313,0.723,314,0.533,315,0.409,316,0.533,317,0.533,318,0.533,319,0.533,320,0.533,321,0.533,322,0.695,323,0.533,324,0.533,325,0.533,326,0.533,327,0.533,328,0.533,329,0.533,330,0.533,331,0.533,332,1.285,333,0.533,334,0.533,335,0.533,336,0.533,337,0.533,338,0.533,339,0.533,340,0.533,341,0.409,342,0.79,343,0.533,344,0.533,345,0.533,346,0.533,347,0.533,348,1.04,349,0.941,350,0.533,351,0.533,352,0.533,353,0.971,354,0.533,355,0.533,356,0.533,357,0.533,358,0.533,359,0.533,360,0.79,361,0.533,362,0.533,363,0.533,364,0.533,365,0.533,366,0.533,367,1.111,368,0.79,369,0.79,370,0.533,371,0.533,372,0.79,373,0.79,374,0.79,375,0.533,376,0.941,377,0.79,378,0.533,379,0.533,380,0.533,381,0.533,382,1.04,383,1.111,384,1.04,385,0.941,386,0.941,387,0.533,388,1.111,389,1.04,390,0.533,391,0.79,392,0.79,393,0.79,394,0.79,395,0.533,396,0.533,397,0.533,398,0.533,399,0.533,400,0.533,401,0.533,402,0.533,403,0.533,404,0.533,405,0.533,406,0.533,407,0.79,408,0.533,409,0.79,410,0.533,411,0.533,412,0.533,413,0.533,414,0.533,415,0.533,416,0.533,417,0.533,418,0.533,419,0.533,420,0.533,421,0.533,422,0.533,423,0.533,424,0.533,425,0.79,426,0.79,427,0.79,428,0.79,429,0.79,430,0.79,431,0.533,432,0.79,433,0.79,434,0.533,435,0.533,436,0.025,437,0.025]],["title/interfaces/DragEndEvent.html",[0,0.098,66,0.641]],["body/interfaces/DragEndEvent.html",[0,0.176,1,0.926,2,0.355,3,0.304,4,0.256,5,0.256,6,0.349,7,0.469,8,0.304,9,0.894,10,1.194,11,1.194,12,0.989,13,0.627,14,0.048,15,0.558,16,0.312,17,0.608,18,0.608,19,0.608,20,0.775,21,0.895,22,0.868,23,0.608,24,0.791,25,0.608,26,0.791,27,0.534,28,0.791,29,0.791,30,0.45,31,0.256,32,1.024,33,0.608,34,0.828,35,0.942,36,0.534,37,0.355,38,0.608,39,0.534,40,0.534,41,0.534,42,0.534,43,0.41,44,1.112,45,0.724,46,0.791,47,0.534,48,0.41,49,0.534,50,0.724,51,0.41,52,0.802,53,0.534,54,0.526,55,0.536,56,0.355,57,0.752,58,0.828,59,1.035,60,0.608,61,0.469,62,1.041,63,0.469,64,1.041,65,0.469,66,0.695,67,1.06,68,0.724,69,0.695,70,0.896,71,0.896,72,0.659,73,1.164,74,1.264,75,0.828,76,0.791,77,0.791,78,0.469,79,0.929,80,1.112,81,0.355,82,0.469,83,0.379,84,0.41,85,0.355,86,0.534,87,0.469,88,0.534,89,0.304,90,0.608,91,0.695,92,0.791,93,0.926,94,0.41,95,0.767,96,0.41,97,0.469,98,0.828,99,0.916,100,0.695,101,0.469,102,0.534,103,0.724,104,0.469,105,0.534,106,0.469,107,0.534,108,0.828,109,0.355,110,0.469,111,0.74,112,0.469,113,0.469,114,0.526,115,0.355,116,0.469,117,0.469,118,1.041,119,0.469,120,0.41,121,0.469,122,0.534,123,0.469,124,0.534,125,0.534,126,0.942,127,0.469,128,0.802,129,0.695,130,0.828,131,0.469,132,0.469,133,0.534,134,0.469,135,0.879,136,0.168,137,0.469,138,0.355,139,0.534,140,0.469,141,0.469,142,0.695,143,0.469,144,0.469,145,0.916,146,1.112,147,0.534,148,0.942,149,0.534,150,1.088,151,0.534,152,0.791,153,1.401,154,0.695,155,0.695,156,0.791,157,0.791,158,0.791,159,0.791,160,0.791,161,0.791,162,0.534,163,0.791,164,0.469,165,1.148,166,0.41,167,0.41,168,0.355,169,0.534,170,0.608,171,0.534,172,0.41,173,0.791,174,1.094,175,0.534,176,0.534,177,0.791,178,0.534,179,0.695,180,0.534,181,0.534,182,0.41,183,0.534,184,0.469,185,0.534,186,0.791,187,0.951,188,0.534,189,0.469,190,0.469,191,0.355,192,1.112,193,0.534,194,0.791,195,0.534,196,0.534,197,0.695,198,0.534,199,0.534,200,0.534,201,0.534,202,0.469,203,0.791,204,0.916,205,1.041,206,0.791,207,0.791,208,0.534,209,1.112,210,1.041,211,0.534,212,0.534,213,0.41,214,0.355,215,1.035,216,0.534,217,0.791,218,0.534,219,0.724,220,0.534,221,0.942,222,0.855,223,0.534,224,0.534,225,0.534,226,0.534,227,0.534,228,0.534,229,0.534,230,0.534,231,0.534,232,0.791,233,0.791,234,0.534,235,0.791,236,0.791,237,0.534,238,0.534,239,0.534,240,0.534,241,0.534,242,0.942,243,0.942,244,0.942,245,0.534,246,0.942,247,0.942,248,0.534,249,0.942,250,0.791,251,0.791,252,0.791,253,0.534,254,0.791,255,0.791,256,0.534,257,0.791,258,0.791,259,0.534,260,0.791,261,0.942,262,0.534,263,0.534,264,0.534,265,0.41,266,0.951,267,0.608,268,0.534,269,0.355,270,0.41,271,0.916,272,0.534,273,0.534,274,0.791,275,0.791,276,0.534,277,0.534,278,0.534,279,0.534,280,0.942,281,0.534,282,0.469,283,1.041,284,0.534,285,1.041,286,0.534,287,0.534,288,0.534,289,0.534,290,0.534,291,0.534,292,0.469,293,0.791,294,0.534,295,0.534,296,0.534,297,0.534,298,0.534,299,0.534,300,0.534,301,0.534,302,0.791,303,0.534,304,0.534,305,0.534,306,0.534,307,0.534,308,0.942,309,0.534,310,0.534,311,0.534,312,0.534,313,0.724,314,0.534,315,0.41,316,0.534,317,0.534,318,0.534,319,0.534,320,0.534,321,0.534,322,0.695,323,0.534,324,0.534,325,0.534,326,0.534,327,0.534,328,0.534,329,0.534,330,0.534,331,0.534,332,1.286,333,0.534,334,0.534,335,0.534,336,0.534,337,0.534,338,0.534,339,0.534,340,0.534,341,0.41,342,0.791,343,0.534,344,0.534,345,0.534,346,0.534,347,0.534,348,1.041,349,0.942,350,0.534,351,0.534,352,0.534,353,0.972,354,0.534,355,0.534,356,0.534,357,0.534,358,0.534,359,0.534,360,0.791,361,0.534,362,0.534,363,0.534,364,0.534,365,0.534,366,0.534,367,1.112,368,0.791,369,0.791,370,0.534,371,0.534,372,0.791,373,0.791,374,0.791,375,0.534,376,0.942,377,0.791,378,0.534,379,0.534,380,0.534,381,0.534,382,1.041,383,1.112,384,1.041,385,0.942,386,0.942,387,0.534,388,1.112,389,1.041,390,0.534,391,0.791,392,0.791,393,0.791,394,0.791,395,0.534,396,0.534,397,0.534,398,0.534,399,0.534,400,0.534,401,0.534,402,0.534,403,0.534,404,0.534,405,0.534,406,0.534,407,0.791,408,0.534,409,0.791,410,0.534,411,0.534,412,0.534,413,0.534,414,0.534,415,0.534,416,0.534,417,0.534,418,0.534,419,0.534,420,0.534,421,0.534,422,0.534,423,0.534,424,0.534,425,0.791,426,0.791,427,0.791,428,0.791,429,0.791,430,0.791,431,0.534,432,0.791,433,0.791,434,0.534,435,0.534,436,0.025,437,0.025]],["title/interfaces/DragMoveEvent.html",[0,0.098,65,0.641]],["body/interfaces/DragMoveEvent.html",[0,0.176,1,0.927,2,0.356,3,0.305,4,0.257,5,0.257,6,0.35,7,0.471,10,1.194,11,1.194,12,0.989,13,0.528,14,0.048,15,0.559,16,0.313,17,0.609,18,0.609,19,0.609,20,0.776,21,0.896,22,0.869,23,0.609,24,0.793,25,0.609,26,0.793,27,0.535,28,0.793,29,0.793,30,0.451,31,0.257,32,1.026,33,0.609,34,0.83,35,0.944,36,0.535,37,0.356,38,0.609,39,0.535,40,0.535,41,0.535,42,0.535,43,0.412,44,1.113,45,0.725,46,0.793,47,0.535,48,0.412,49,0.535,50,0.725,51,0.412,52,0.803,53,0.535,54,0.528,55,0.537,56,0.356,57,0.752,58,0.83,59,1.016,60,0.609,61,0.471,62,1.043,63,0.471,64,1.043,65,0.697,66,0.471,67,0.918,68,0.725,69,0.697,70,0.897,71,0.897,72,0.659,73,1.166,74,1.265,75,0.83,76,0.793,77,0.793,78,0.471,79,0.929,80,1.113,81,0.356,82,0.471,83,0.38,84,0.412,85,0.356,86,0.535,87,0.471,88,0.535,89,0.305,90,0.609,91,0.697,92,0.793,93,0.927,94,0.412,95,0.767,96,0.412,97,0.471,98,0.83,99,0.918,100,0.697,101,0.471,102,0.535,103,0.725,104,0.471,105,0.535,106,0.471,107,0.535,108,0.83,109,0.356,110,0.471,111,0.741,112,0.471,113,0.471,114,0.528,115,0.356,116,0.471,117,0.471,118,1.043,119,0.471,120,0.412,121,0.471,122,0.535,123,0.471,124,0.535,125,0.535,126,0.944,127,0.471,128,0.803,129,0.697,130,0.83,131,0.471,132,0.471,133,0.535,134,0.471,135,0.88,136,0.168,137,0.471,138,0.356,139,0.535,140,0.471,141,0.471,142,0.697,143,0.471,144,0.471,145,0.918,146,1.113,147,0.535,148,0.944,149,0.535,150,1.088,151,0.535,152,0.793,153,1.402,154,0.697,155,0.697,156,0.793,157,0.793,158,0.793,159,0.793,160,0.793,161,0.793,162,0.535,163,0.793,164,0.471,165,1.149,166,0.412,167,0.412,168,0.356,169,0.535,170,0.609,171,0.535,172,0.412,173,0.793,174,1.094,175,0.535,176,0.535,177,0.793,178,0.535,179,0.697,180,0.535,181,0.535,182,0.412,183,0.535,184,0.471,185,0.535,186,0.793,187,0.952,188,0.535,189,0.471,190,0.471,191,0.356,192,1.113,193,0.535,194,0.793,195,0.535,196,0.535,197,0.697,198,0.535,199,0.535,200,0.535,201,0.535,202,0.471,203,0.793,204,0.918,205,1.043,206,0.793,207,0.793,208,0.535,209,1.113,210,1.043,211,0.535,212,0.535,213,0.412,214,0.356,215,1.036,216,0.535,217,0.793,218,0.535,219,0.725,220,0.535,221,0.944,222,0.856,223,0.535,224,0.535,225,0.535,226,0.535,227,0.535,228,0.535,229,0.535,230,0.535,231,0.535,232,0.793,233,0.793,234,0.535,235,0.793,236,0.793,237,0.535,238,0.535,239,0.535,240,0.535,241,0.535,242,0.944,243,0.944,244,0.944,245,0.535,246,0.944,247,0.944,248,0.535,249,0.944,250,0.793,251,0.793,252,0.793,253,0.535,254,0.793,255,0.793,256,0.535,257,0.793,258,0.793,259,0.535,260,0.793,261,0.944,262,0.535,263,0.535,264,0.535,265,0.412,266,0.952,267,0.609,268,0.535,269,0.356,270,0.412,271,0.918,272,0.535,273,0.535,274,0.793,275,0.793,276,0.535,277,0.535,278,0.535,279,0.535,280,0.944,281,0.535,282,0.471,283,1.043,284,0.535,285,1.043,286,0.535,287,0.535,288,0.535,289,0.535,290,0.535,291,0.535,292,0.471,293,0.793,294,0.535,295,0.535,296,0.535,297,0.535,298,0.535,299,0.535,300,0.535,301,0.535,302,0.793,303,0.535,304,0.535,305,0.535,306,0.535,307,0.535,308,0.944,309,0.535,310,0.535,311,0.535,312,0.535,313,0.725,314,0.535,315,0.412,316,0.535,317,0.535,318,0.535,319,0.535,320,0.535,321,0.535,322,0.697,323,0.535,324,0.535,325,0.535,326,0.535,327,0.535,328,0.535,329,0.535,330,0.535,331,0.535,332,1.287,333,0.535,334,0.535,335,0.535,336,0.535,337,0.535,338,0.535,339,0.535,340,0.535,341,0.412,342,0.793,343,0.535,344,0.535,345,0.535,346,0.535,347,0.535,348,1.043,349,0.944,350,0.535,351,0.535,352,0.535,353,0.973,354,0.535,355,0.535,356,0.535,357,0.535,358,0.535,359,0.535,360,0.793,361,0.535,362,0.535,363,0.535,364,0.535,365,0.535,366,0.535,367,1.113,368,0.793,369,0.793,370,0.535,371,0.535,372,0.793,373,0.793,374,0.793,375,0.535,376,0.944,377,0.793,378,0.535,379,0.535,380,0.535,381,0.535,382,1.043,383,1.113,384,1.043,385,0.944,386,0.944,387,0.535,388,1.113,389,1.043,390,0.535,391,0.793,392,0.793,393,0.793,394,0.793,395,0.535,396,0.535,397,0.535,398,0.535,399,0.535,400,0.535,401,0.535,402,0.535,403,0.535,404,0.535,405,0.535,406,0.535,407,0.793,408,0.535,409,0.793,410,0.535,411,0.535,412,0.535,413,0.535,414,0.535,415,0.535,416,0.535,417,0.535,418,0.535,419,0.535,420,0.535,421,0.535,422,0.535,423,0.535,424,0.535,425,0.793,426,0.793,427,0.793,428,0.793,429,0.793,430,0.793,431,0.535,432,0.793,433,0.793,434,0.535,435,0.535,436,0.025,437,0.025]],["title/interfaces/DragPointerDownEvent.html",[0,0.098,61,0.641]],["body/interfaces/DragPointerDownEvent.html",[0,0.176,1,0.927,2,0.356,3,0.305,4,0.257,5,0.257,6,0.35,7,0.471,10,1.194,11,1.194,12,0.989,13,0.528,14,0.048,15,0.559,16,0.313,17,0.609,18,0.609,19,0.609,20,0.776,21,0.896,22,0.869,23,0.609,24,0.793,25,0.609,26,0.793,27,0.535,28,0.793,29,0.793,30,0.451,31,0.257,32,1.026,33,0.609,34,0.83,35,0.944,36,0.535,37,0.356,38,0.609,39,0.535,40,0.535,41,0.535,42,0.535,43,0.412,44,1.113,45,0.725,46,0.793,47,0.535,48,0.412,49,0.535,50,0.725,51,0.412,52,0.803,53,0.535,54,0.528,55,0.537,56,0.356,57,0.752,58,0.83,59,1.016,60,0.609,61,0.697,62,1.043,63,0.471,64,1.043,65,0.471,66,0.471,67,0.918,68,0.725,69,0.697,70,0.897,71,0.897,72,0.659,73,1.166,74,1.265,75,0.83,76,0.793,77,0.793,78,0.471,79,0.929,80,1.113,81,0.356,82,0.471,83,0.38,84,0.412,85,0.356,86,0.535,87,0.471,88,0.535,89,0.305,90,0.609,91,0.697,92,0.793,93,0.927,94,0.412,95,0.767,96,0.412,97,0.471,98,0.83,99,0.918,100,0.697,101,0.471,102,0.535,103,0.725,104,0.471,105,0.535,106,0.471,107,0.535,108,0.83,109,0.356,110,0.471,111,0.741,112,0.471,113,0.471,114,0.528,115,0.356,116,0.471,117,0.471,118,1.043,119,0.471,120,0.412,121,0.471,122,0.535,123,0.471,124,0.535,125,0.535,126,0.944,127,0.471,128,0.803,129,0.697,130,0.83,131,0.471,132,0.471,133,0.535,134,0.471,135,0.88,136,0.168,137,0.471,138,0.356,139,0.535,140,0.471,141,0.471,142,0.697,143,0.471,144,0.471,145,0.918,146,1.113,147,0.535,148,0.944,149,0.535,150,1.088,151,0.535,152,0.793,153,1.402,154,0.697,155,0.697,156,0.793,157,0.793,158,0.793,159,0.793,160,0.793,161,0.793,162,0.535,163,0.793,164,0.471,165,1.149,166,0.412,167,0.412,168,0.356,169,0.535,170,0.609,171,0.535,172,0.412,173,0.793,174,1.094,175,0.535,176,0.535,177,0.793,178,0.535,179,0.697,180,0.535,181,0.535,182,0.412,183,0.535,184,0.471,185,0.535,186,0.793,187,0.952,188,0.535,189,0.471,190,0.471,191,0.356,192,1.113,193,0.535,194,0.793,195,0.535,196,0.535,197,0.697,198,0.535,199,0.535,200,0.535,201,0.535,202,0.471,203,0.793,204,0.918,205,1.043,206,0.793,207,0.793,208,0.535,209,1.113,210,1.043,211,0.535,212,0.535,213,0.412,214,0.356,215,1.036,216,0.535,217,0.793,218,0.535,219,0.725,220,0.535,221,0.944,222,0.856,223,0.535,224,0.535,225,0.535,226,0.535,227,0.535,228,0.535,229,0.535,230,0.535,231,0.535,232,0.793,233,0.793,234,0.535,235,0.793,236,0.793,237,0.535,238,0.535,239,0.535,240,0.535,241,0.535,242,0.944,243,0.944,244,0.944,245,0.535,246,0.944,247,0.944,248,0.535,249,0.944,250,0.793,251,0.793,252,0.793,253,0.535,254,0.793,255,0.793,256,0.535,257,0.793,258,0.793,259,0.535,260,0.793,261,0.944,262,0.535,263,0.535,264,0.535,265,0.412,266,0.952,267,0.609,268,0.535,269,0.356,270,0.412,271,0.918,272,0.535,273,0.535,274,0.793,275,0.793,276,0.535,277,0.535,278,0.535,279,0.535,280,0.944,281,0.535,282,0.471,283,1.043,284,0.535,285,1.043,286,0.535,287,0.535,288,0.535,289,0.535,290,0.535,291,0.535,292,0.471,293,0.793,294,0.535,295,0.535,296,0.535,297,0.535,298,0.535,299,0.535,300,0.535,301,0.535,302,0.793,303,0.535,304,0.535,305,0.535,306,0.535,307,0.535,308,0.944,309,0.535,310,0.535,311,0.535,312,0.535,313,0.725,314,0.535,315,0.412,316,0.535,317,0.535,318,0.535,319,0.535,320,0.535,321,0.535,322,0.697,323,0.535,324,0.535,325,0.535,326,0.535,327,0.535,328,0.535,329,0.535,330,0.535,331,0.535,332,1.287,333,0.535,334,0.535,335,0.535,336,0.535,337,0.535,338,0.535,339,0.535,340,0.535,341,0.412,342,0.793,343,0.535,344,0.535,345,0.535,346,0.535,347,0.535,348,1.043,349,0.944,350,0.535,351,0.535,352,0.535,353,0.973,354,0.535,355,0.535,356,0.535,357,0.535,358,0.535,359,0.535,360,0.793,361,0.535,362,0.535,363,0.535,364,0.535,365,0.535,366,0.535,367,1.113,368,0.793,369,0.793,370,0.535,371,0.535,372,0.793,373,0.793,374,0.793,375,0.535,376,0.944,377,0.793,378,0.535,379,0.535,380,0.535,381,0.535,382,1.043,383,1.113,384,1.043,385,0.944,386,0.944,387,0.535,388,1.113,389,1.043,390,0.535,391,0.793,392,0.793,393,0.793,394,0.793,395,0.535,396,0.535,397,0.535,398,0.535,399,0.535,400,0.535,401,0.535,402,0.535,403,0.535,404,0.535,405,0.535,406,0.535,407,0.793,408,0.535,409,0.793,410,0.535,411,0.535,412,0.535,413,0.535,414,0.535,415,0.535,416,0.535,417,0.535,418,0.535,419,0.535,420,0.535,421,0.535,422,0.535,423,0.535,424,0.535,425,0.793,426,0.793,427,0.793,428,0.793,429,0.793,430,0.793,431,0.535,432,0.793,433,0.793,434,0.535,435,0.535,436,0.025,437,0.025]],["title/interfaces/DragStartEvent.html",[0,0.098,63,0.641]],["body/interfaces/DragStartEvent.html",[0,0.176,1,0.895,2,0.355,3,0.304,4,0.256,5,0.256,6,0.349,7,0.47,8,0.304,9,0.895,10,1.194,11,1.194,12,0.989,13,0.627,14,0.048,15,0.558,16,0.312,17,0.608,18,0.608,19,0.608,20,0.775,21,0.895,22,0.868,23,0.608,24,0.791,25,0.608,26,0.791,27,0.534,28,0.791,29,0.791,30,0.45,31,0.256,32,1.025,33,0.608,34,0.829,35,1.112,36,0.534,37,0.355,38,0.608,39,0.534,40,0.534,41,0.534,42,0.534,43,0.41,44,1.112,45,0.724,46,0.791,47,0.534,48,0.41,49,0.534,50,0.724,51,0.41,52,0.802,53,0.534,54,0.526,55,0.536,56,0.355,57,0.752,58,0.829,59,1.015,60,0.608,61,0.47,62,0.942,63,0.696,64,1.205,65,0.47,66,0.47,67,0.916,68,0.724,69,0.696,70,0.896,71,0.896,72,0.659,73,1.165,74,1.264,75,0.829,76,0.791,77,0.791,78,0.47,79,0.929,80,1.112,81,0.355,82,0.47,83,0.379,84,0.41,85,0.355,86,0.534,87,0.47,88,0.534,89,0.304,90,0.608,91,0.696,92,0.791,93,0.927,94,0.41,95,0.767,96,0.41,97,0.47,98,0.829,99,0.916,100,0.696,101,0.47,102,0.534,103,0.724,104,0.47,105,0.534,106,0.47,107,0.534,108,0.829,109,0.355,110,0.47,111,0.74,112,0.47,113,0.47,114,0.526,115,0.355,116,0.47,117,0.47,118,1.042,119,0.47,120,0.41,121,0.47,122,0.534,123,0.47,124,0.534,125,0.534,126,0.942,127,0.47,128,0.802,129,0.696,130,0.829,131,0.47,132,0.47,133,0.534,134,0.47,135,0.879,136,0.168,137,0.47,138,0.355,139,0.534,140,0.47,141,0.47,142,0.696,143,0.47,144,0.47,145,0.916,146,1.112,147,0.534,148,0.942,149,0.534,150,1.088,151,0.534,152,0.791,153,1.401,154,0.696,155,0.696,156,0.791,157,0.791,158,0.791,159,0.791,160,0.791,161,0.791,162,0.534,163,0.791,164,0.47,165,1.148,166,0.41,167,0.41,168,0.355,169,0.534,170,0.608,171,0.534,172,0.41,173,0.791,174,1.094,175,0.534,176,0.534,177,0.791,178,0.534,179,0.696,180,0.534,181,0.534,182,0.41,183,0.534,184,0.47,185,0.534,186,0.791,187,0.951,188,0.534,189,0.47,190,0.47,191,0.355,192,1.112,193,0.534,194,0.791,195,0.534,196,0.534,197,0.696,198,0.534,199,0.534,200,0.534,201,0.534,202,0.47,203,0.791,204,0.916,205,1.042,206,0.791,207,0.791,208,0.534,209,1.112,210,1.042,211,0.534,212,0.534,213,0.41,214,0.355,215,1.035,216,0.534,217,0.791,218,0.534,219,0.724,220,0.534,221,0.942,222,0.855,223,0.534,224,0.534,225,0.534,226,0.534,227,0.534,228,0.534,229,0.534,230,0.534,231,0.534,232,0.791,233,0.791,234,0.534,235,0.791,236,0.791,237,0.534,238,0.534,239,0.534,240,0.534,241,0.534,242,0.942,243,0.942,244,0.942,245,0.534,246,0.942,247,0.942,248,0.534,249,0.942,250,0.791,251,0.791,252,0.791,253,0.534,254,0.791,255,0.791,256,0.534,257,0.791,258,0.791,259,0.534,260,0.791,261,0.942,262,0.534,263,0.534,264,0.534,265,0.41,266,0.951,267,0.608,268,0.534,269,0.355,270,0.41,271,0.916,272,0.534,273,0.534,274,0.791,275,0.791,276,0.534,277,0.534,278,0.534,279,0.534,280,0.942,281,0.534,282,0.47,283,1.042,284,0.534,285,1.042,286,0.534,287,0.534,288,0.534,289,0.534,290,0.534,291,0.534,292,0.47,293,0.791,294,0.534,295,0.534,296,0.534,297,0.534,298,0.534,299,0.534,300,0.534,301,0.534,302,0.791,303,0.534,304,0.534,305,0.534,306,0.534,307,0.534,308,0.942,309,0.534,310,0.534,311,0.534,312,0.534,313,0.724,314,0.534,315,0.41,316,0.534,317,0.534,318,0.534,319,0.534,320,0.534,321,0.534,322,0.696,323,0.534,324,0.534,325,0.534,326,0.534,327,0.534,328,0.534,329,0.534,330,0.534,331,0.534,332,1.286,333,0.534,334,0.534,335,0.534,336,0.534,337,0.534,338,0.534,339,0.534,340,0.534,341,0.41,342,0.791,343,0.534,344,0.534,345,0.534,346,0.534,347,0.534,348,1.042,349,0.942,350,0.534,351,0.534,352,0.534,353,0.972,354,0.534,355,0.534,356,0.534,357,0.534,358,0.534,359,0.534,360,0.791,361,0.534,362,0.534,363,0.534,364,0.534,365,0.534,366,0.534,367,1.112,368,0.791,369,0.791,370,0.534,371,0.534,372,0.791,373,0.791,374,0.791,375,0.534,376,0.942,377,0.791,378,0.534,379,0.534,380,0.534,381,0.534,382,1.042,383,1.112,384,1.042,385,0.942,386,0.942,387,0.534,388,1.112,389,1.042,390,0.534,391,0.791,392,0.791,393,0.791,394,0.791,395,0.534,396,0.534,397,0.534,398,0.534,399,0.534,400,0.534,401,0.534,402,0.534,403,0.534,404,0.534,405,0.534,406,0.534,407,0.791,408,0.534,409,0.791,410,0.534,411,0.534,412,0.534,413,0.534,414,0.534,415,0.534,416,0.534,417,0.534,418,0.534,419,0.534,420,0.534,421,0.534,422,0.534,423,0.534,424,0.534,425,0.791,426,0.791,427,0.791,428,0.791,429,0.791,430,0.791,431,0.534,432,0.791,433,0.791,434,0.534,435,0.534,436,0.025,437,0.025]],["title/directives/DraggableDirective.html",[16,0.287,84,0.56]],["body/directives/DraggableDirective.html",[0,0.17,1,0.867,2,0.326,3,0.279,4,0.235,5,0.645,6,0.435,7,0.431,8,0.279,10,1.193,11,1.193,12,0.968,13,0.903,14,0.048,15,0.54,16,0.353,17,0.688,18,0.57,19,0.57,20,0.803,21,0.983,22,0.873,23,0.688,24,0.895,25,0.57,26,0.741,27,0.49,28,0.895,29,0.741,30,0.422,31,0.235,32,0.992,33,0.57,34,0.787,35,0.895,36,0.49,37,0.326,38,0.57,39,0.49,40,0.49,41,0.49,42,0.49,43,0.376,44,1.072,45,0.688,46,0.741,47,0.49,48,0.376,49,0.49,50,0.688,51,0.376,52,0.78,53,0.49,54,0.493,55,0.509,56,0.326,57,0.738,58,0.992,59,1.018,60,0.688,61,0.431,62,0.895,63,0.431,64,0.998,65,0.431,66,0.431,67,0.878,68,0.867,69,0.652,70,0.882,71,0.882,72,0.672,73,1.128,74,1.235,75,0.787,76,0.741,77,0.741,78,0.431,79,0.959,80,1.128,81,0.493,82,0.652,83,0.429,84,0.57,85,0.493,86,0.741,87,0.652,88,0.741,89,0.422,90,0.767,91,0.878,92,0.998,93,0.983,94,0.57,95,0.807,96,0.57,97,0.787,98,0.992,99,1.061,100,0.943,101,0.652,102,0.895,103,0.767,104,0.652,105,0.741,106,0.652,107,0.741,108,0.878,109,0.493,110,0.787,111,0.78,112,0.652,113,0.652,114,0.664,115,0.595,116,0.652,117,1.03,118,1.072,119,0.787,120,0.57,121,0.652,122,0.741,123,0.652,124,0.741,125,0.741,126,0.998,127,0.787,128,0.882,129,0.878,130,0.943,131,0.652,132,0.652,133,0.741,134,0.787,135,0.863,136,0.233,137,0.652,138,0.493,139,0.741,140,0.652,141,0.652,142,0.878,143,0.652,144,0.787,145,0.992,146,1.072,147,0.49,148,0.895,149,0.49,150,1.077,151,0.49,152,0.741,153,1.385,154,0.652,155,0.652,156,0.741,157,0.741,158,0.741,159,0.741,160,0.741,161,0.741,162,0.49,163,0.741,164,0.431,165,1.125,166,0.376,167,0.376,168,0.326,169,0.49,170,0.57,171,0.49,172,0.376,173,0.741,174,1.084,175,0.49,176,0.49,177,0.741,178,0.49,179,0.652,180,0.49,181,0.49,182,0.376,183,0.49,184,0.431,185,0.49,186,0.741,187,0.927,188,0.49,189,0.431,190,0.431,191,0.326,192,1.072,193,0.49,194,0.741,195,0.49,196,0.49,197,0.652,198,0.49,199,0.49,200,0.49,201,0.49,202,0.431,203,0.741,204,0.878,205,0.998,206,0.741,207,0.741,208,0.49,209,1.072,210,0.998,211,0.49,212,0.49,213,0.376,214,0.326,215,1.018,216,0.49,217,0.741,218,0.49,219,0.688,220,0.49,221,0.895,222,0.824,223,0.49,224,0.49,225,0.49,226,0.49,227,0.49,228,0.49,229,0.49,230,0.49,231,0.49,232,0.741,233,0.741,234,0.49,235,0.741,236,0.741,237,0.49,238,0.49,239,0.49,240,0.49,241,0.49,242,0.895,243,0.895,244,0.895,245,0.49,246,0.895,247,0.895,248,0.49,249,0.895,250,0.741,251,0.741,252,0.741,253,0.49,254,0.741,255,0.741,256,0.49,257,0.741,258,0.741,259,0.49,260,0.741,261,0.895,262,0.49,263,0.49,264,0.49,265,0.376,266,0.927,267,0.57,268,0.49,269,0.326,270,0.376,271,0.878,272,0.49,273,0.49,274,0.741,275,0.741,276,0.49,277,0.49,278,0.49,279,0.49,280,0.895,281,0.49,282,0.431,283,0.998,284,0.49,285,0.998,286,0.49,287,0.49,288,0.49,289,0.49,290,0.49,291,0.49,292,0.431,293,0.741,294,0.49,295,0.49,296,0.49,297,0.49,298,0.49,299,0.49,300,0.49,301,0.49,302,0.741,303,0.49,304,0.49,305,0.49,306,0.49,307,0.49,308,0.895,309,0.49,310,0.49,311,0.49,312,0.49,313,0.688,314,0.49,315,0.376,316,0.49,317,0.49,318,0.49,319,0.49,320,0.49,321,0.49,322,1.03,323,0.49,324,0.49,325,0.49,326,0.49,327,0.49,328,0.49,329,0.49,330,0.49,331,0.49,332,1.259,333,0.49,334,0.49,335,0.49,336,0.49,337,0.49,338,0.49,339,0.49,340,0.49,341,0.376,342,0.741,343,0.49,344,0.49,345,0.49,346,0.49,347,0.49,348,0.998,349,0.895,350,0.49,351,0.49,352,0.49,353,0.949,354,0.49,355,0.49,356,0.49,357,0.49,358,0.49,359,0.49,360,0.741,361,0.49,362,0.49,363,0.49,364,0.49,365,0.49,366,0.49,367,1.072,368,0.741,369,0.741,370,0.49,371,0.49,372,0.741,373,0.741,374,0.741,375,0.49,376,0.895,377,0.741,378,0.49,379,0.49,380,0.49,381,0.49,382,0.998,383,1.072,384,0.998,385,0.895,386,0.895,387,0.49,388,1.072,389,0.998,390,0.49,391,0.741,392,0.741,393,0.741,394,0.741,395,0.49,396,0.49,397,0.49,398,0.49,399,0.49,400,0.49,401,0.49,402,0.49,403,0.49,404,0.49,405,0.49,406,0.49,407,0.741,408,0.49,409,0.741,410,0.49,411,0.49,412,0.49,413,0.49,414,0.49,415,0.49,416,0.49,417,0.49,418,0.49,419,0.49,420,0.49,421,0.49,422,0.49,423,0.49,424,0.49,425,0.741,426,0.741,427,0.741,428,0.741,429,0.741,430,0.741,431,0.49,432,0.741,433,0.741,434,0.49,435,0.49,436,0.024,437,0.024,447,1.568,448,4.279,449,1.929,450,1.929,451,1.929,452,1.929,453,1.929,454,1.929,455,1.929,456,1.929,457,1.929,458,1.929,459,1.929,460,1.929,461,1.929,462,1.929,463,1.929]],["title/interfaces/DropEvent.html",[0,0.098,464,2.334]],["body/interfaces/DropEvent.html",[0,0.119,2,0.586,3,0.501,4,0.422,5,0.422,6,0.439,8,0.501,9,1.263,12,0.858,13,0.586,14,0.048,15,0.637,16,0.44,17,0.858,18,0.858,19,0.858,20,0.905,21,1.022,22,0.816,23,0.858,25,0.858,30,0.636,31,0.422,37,0.743,38,0.858,43,0.858,45,0.677,48,0.677,50,0.942,51,0.677,54,0.743,55,0.636,56,0.586,57,0.501,59,0.942,70,0.905,71,0.885,72,0.422,79,0.961,81,0.586,83,0.422,85,0.586,89,0.636,90,1.092,93,0.942,95,0.698,103,0.858,111,0.743,114,0.586,115,0.586,128,0.858,135,0.858,136,0.276,138,0.586,150,1.022,166,0.677,167,0.677,168,0.586,170,0.677,172,0.677,174,1.022,182,0.677,187,0.858,213,0.677,214,0.586,215,0.942,219,0.677,222,0.991,265,0.858,266,1.022,267,0.858,269,0.743,270,0.677,313,0.858,315,0.942,341,0.677,353,0.677,436,0.035,437,0.035,443,2.072,464,2.818,465,2.391,466,3.924,467,3.574,468,2.818,469,1.817,470,3.329,471,4.258,472,2.818,473,2.818,474,2.391,475,3.032,476,3.032,477,2.391,478,2.818,479,3.924,480,2.818,481,2.818,482,2.818,483,2.818,484,2.818,485,2.391,486,2.391,487,2.818,488,3.574,489,2.818,490,2.818,491,3.574,492,2.818,493,3.574,494,3.924,495,4.351,496,2.818,497,3.574,498,3.924,499,2.818,500,3.924,501,3.924,502,2.818,503,4.127,504,2.818,505,2.391,506,2.818,507,2.391,508,2.818,509,2.818,510,2.818,511,3.924,512,3.924,513,2.818,514,2.818,515,2.818,516,2.818,517,2.818,518,2.818,519,2.818,520,2.818,521,2.391,522,2.818,523,2.818]],["title/directives/DroppableDirective.html",[16,0.287,443,1.716]],["body/directives/DroppableDirective.html",[2,0.544,3,0.465,4,0.392,5,0.667,6,0.46,8,0.465,9,1.204,12,0.818,13,0.916,14,0.048,15,0.623,16,0.467,17,0.91,18,0.964,19,0.964,20,0.916,21,1.069,22,0.865,23,0.91,25,0.964,30,0.674,31,0.392,37,0.708,38,0.818,43,0.818,45,0.628,48,0.628,50,1.043,51,0.628,54,0.834,55,0.606,56,0.544,57,0.465,59,0.91,70,0.887,71,0.865,72,0.623,79,0.982,81,0.708,83,0.392,85,0.708,89,0.74,90,1.043,93,0.91,95,0.74,103,0.818,111,0.834,114,0.708,115,0.788,128,0.916,135,0.834,136,0.334,138,0.708,150,0.999,166,0.818,167,0.91,168,0.788,170,0.91,172,0.628,174,0.999,182,0.818,187,0.818,213,0.628,214,0.544,215,0.91,219,0.628,222,0.964,265,0.818,266,0.999,267,0.818,269,0.708,270,0.628,313,0.818,315,0.91,341,0.628,353,0.628,436,0.034,437,0.034,443,2.504,447,2.616,448,4.405,465,2.219,466,2.616,467,4.013,468,2.616,469,1.687,470,3.214,471,4.161,472,2.616,473,2.616,474,2.89,475,3.405,476,3.405,477,3.214,478,3.407,479,4.161,480,3.788,481,3.788,482,3.788,483,2.616,484,2.616,485,2.89,486,2.219,487,4.013,488,3.407,489,2.616,490,2.616,491,3.407,492,2.616,493,3.407,494,3.788,495,4.266,496,2.616,497,3.407,498,3.788,499,2.616,500,3.788,501,3.788,502,2.616,503,4.013,504,2.616,505,2.219,506,2.616,507,2.219,508,2.616,509,2.616,510,2.616,511,3.788,512,3.788,513,2.616,514,2.616,515,2.616,516,2.616,517,2.616,518,2.616,519,2.616,520,2.616,521,2.219,522,2.616,523,2.616,524,3.218,525,4.191,526,2.616,527,3.218,528,3.218,529,3.218,530,3.218,531,3.218,532,3.218]],["title/interfaces/GhostElementCreatedEvent.html",[0,0.098,78,0.641]],["body/interfaces/GhostElementCreatedEvent.html",[0,0.176,1,0.894,2,0.354,3,0.303,4,0.255,5,0.255,6,0.349,7,0.467,8,0.303,9,0.892,10,1.193,11,1.193,12,1.034,13,0.739,14,0.048,15,0.557,16,0.311,17,0.606,18,0.606,19,0.606,20,0.774,21,0.894,22,0.867,23,0.606,24,0.788,25,0.606,26,0.788,27,0.531,28,0.788,29,0.788,30,0.449,31,0.255,32,1.023,33,0.606,34,0.826,35,0.939,36,0.531,37,0.354,38,0.606,39,0.531,40,0.531,41,0.531,42,0.531,43,0.408,44,1.11,45,0.722,46,0.788,47,0.531,48,0.408,49,0.531,50,0.722,51,0.408,52,0.801,53,0.531,54,0.525,55,0.535,56,0.354,57,0.751,58,0.826,59,1.014,60,0.606,61,0.467,62,0.939,63,0.467,64,1.039,65,0.467,66,0.467,67,0.914,68,0.722,69,0.693,70,0.914,71,0.914,72,0.658,73,1.163,74,1.263,75,0.826,76,0.788,77,0.788,78,0.693,79,0.939,80,1.203,81,0.354,82,0.467,83,0.378,84,0.408,85,0.354,86,0.531,87,0.467,88,0.531,89,0.303,90,0.606,91,0.693,92,0.788,93,0.925,94,0.408,95,0.766,96,0.408,97,0.467,98,0.826,99,0.914,100,0.693,101,0.467,102,0.531,103,0.722,104,0.467,105,0.531,106,0.467,107,0.531,108,0.826,109,0.354,110,0.467,111,0.739,112,0.467,113,0.467,114,0.525,115,0.354,116,0.467,117,0.467,118,1.039,119,0.467,120,0.408,121,0.467,122,0.531,123,0.467,124,0.531,125,0.531,126,0.939,127,0.467,128,0.801,129,0.693,130,0.826,131,0.467,132,0.467,133,0.531,134,0.467,135,0.878,136,0.167,137,0.467,138,0.354,139,0.531,140,0.467,141,0.467,142,0.693,143,0.467,144,0.467,145,0.914,146,1.11,147,0.531,148,0.939,149,0.531,150,1.087,151,0.531,152,0.788,153,1.4,154,0.693,155,0.693,156,0.788,157,0.788,158,0.788,159,0.788,160,0.788,161,0.788,162,0.531,163,0.788,164,0.467,165,1.147,166,0.408,167,0.408,168,0.354,169,0.531,170,0.606,171,0.531,172,0.408,173,0.788,174,1.094,175,0.531,176,0.531,177,0.788,178,0.531,179,0.693,180,0.531,181,0.531,182,0.408,183,0.531,184,0.467,185,0.531,186,0.788,187,0.95,188,0.531,189,0.467,190,0.467,191,0.354,192,1.11,193,0.531,194,0.788,195,0.531,196,0.531,197,0.693,198,0.531,199,0.531,200,0.531,201,0.531,202,0.467,203,0.788,204,0.914,205,1.039,206,0.788,207,0.788,208,0.531,209,1.11,210,1.039,211,0.531,212,0.531,213,0.408,214,0.354,215,1.034,216,0.531,217,0.788,218,0.531,219,0.722,220,0.531,221,0.939,222,0.853,223,0.531,224,0.531,225,0.531,226,0.531,227,0.531,228,0.531,229,0.531,230,0.531,231,0.531,232,0.788,233,0.788,234,0.531,235,0.788,236,0.788,237,0.531,238,0.531,239,0.531,240,0.531,241,0.531,242,0.939,243,0.939,244,0.939,245,0.531,246,0.939,247,0.939,248,0.531,249,0.939,250,0.788,251,0.788,252,0.788,253,0.531,254,0.788,255,0.788,256,0.531,257,0.788,258,0.788,259,0.531,260,0.788,261,0.939,262,0.531,263,0.531,264,0.531,265,0.408,266,0.95,267,0.606,268,0.531,269,0.354,270,0.408,271,0.914,272,0.531,273,0.531,274,0.788,275,0.788,276,0.531,277,0.531,278,0.531,279,0.531,280,0.939,281,0.531,282,0.467,283,1.039,284,0.531,285,1.039,286,0.531,287,0.531,288,0.531,289,0.531,290,0.531,291,0.531,292,0.467,293,0.788,294,0.531,295,0.531,296,0.531,297,0.531,298,0.531,299,0.531,300,0.531,301,0.531,302,0.788,303,0.531,304,0.531,305,0.531,306,0.531,307,0.531,308,0.939,309,0.531,310,0.531,311,0.531,312,0.531,313,0.722,314,0.531,315,0.408,316,0.531,317,0.531,318,0.531,319,0.531,320,0.531,321,0.531,322,0.693,323,0.531,324,0.531,325,0.531,326,0.531,327,0.531,328,0.531,329,0.531,330,0.531,331,0.531,332,1.285,333,0.531,334,0.531,335,0.531,336,0.531,337,0.531,338,0.531,339,0.531,340,0.531,341,0.408,342,0.788,343,0.531,344,0.531,345,0.531,346,0.531,347,0.531,348,1.039,349,0.939,350,0.531,351,0.531,352,0.531,353,0.971,354,0.531,355,0.531,356,0.531,357,0.531,358,0.531,359,0.531,360,0.788,361,0.531,362,0.531,363,0.531,364,0.531,365,0.531,366,0.531,367,1.11,368,0.788,369,0.788,370,0.531,371,0.531,372,0.788,373,0.788,374,0.788,375,0.531,376,0.939,377,0.788,378,0.531,379,0.531,380,0.531,381,0.531,382,1.039,383,1.11,384,1.039,385,0.939,386,0.939,387,0.531,388,1.11,389,1.039,390,0.531,391,0.788,392,0.788,393,0.788,394,0.788,395,0.531,396,0.531,397,0.531,398,0.531,399,0.531,400,0.531,401,0.531,402,0.531,403,0.531,404,0.531,405,0.531,406,0.531,407,0.788,408,0.531,409,0.788,410,0.531,411,0.531,412,0.531,413,0.531,414,0.531,415,0.531,416,0.531,417,0.531,418,0.531,419,0.531,420,0.531,421,0.531,422,0.531,423,0.531,424,0.531,425,0.788,426,0.788,427,0.788,428,0.788,429,0.788,430,0.788,431,0.531,432,0.788,433,0.788,434,0.531,435,0.531,436,0.025,437,0.025]],["title/interfaces/PointerEvent.html",[0,0.098,69,0.641]],["body/interfaces/PointerEvent.html",[0,0.176,1,0.893,2,0.353,3,0.302,4,0.254,5,0.254,6,0.348,7,0.467,8,0.302,9,0.891,10,1.193,11,1.193,12,1.034,13,0.738,14,0.048,15,0.557,16,0.31,17,0.605,18,0.605,19,0.605,20,0.773,21,0.893,22,0.867,23,0.605,24,0.787,25,0.605,26,0.787,27,0.531,28,0.787,29,0.787,30,0.448,31,0.254,32,1.022,33,0.605,34,0.826,35,0.939,36,0.531,37,0.353,38,0.605,39,0.531,40,0.531,41,0.531,42,0.531,43,0.408,44,1.109,45,0.721,46,0.787,47,0.531,48,0.408,49,0.531,50,0.721,51,0.408,52,0.801,53,0.531,54,0.524,55,0.534,56,0.353,57,0.751,58,0.826,59,1.014,60,0.605,61,0.467,62,0.939,63,0.467,64,1.038,65,0.467,66,0.467,67,0.914,68,0.721,69,0.826,70,0.914,71,0.914,72,0.668,73,1.236,74,1.303,75,0.826,76,0.787,77,0.787,78,0.467,79,0.928,80,1.109,81,0.353,82,0.467,83,0.377,84,0.408,85,0.353,86,0.531,87,0.467,88,0.531,89,0.302,90,0.605,91,0.693,92,0.787,93,0.925,94,0.408,95,0.766,96,0.408,97,0.467,98,0.826,99,0.914,100,0.693,101,0.467,102,0.531,103,0.721,104,0.467,105,0.531,106,0.467,107,0.531,108,0.826,109,0.353,110,0.467,111,0.738,112,0.467,113,0.467,114,0.524,115,0.353,116,0.467,117,0.467,118,1.038,119,0.467,120,0.408,121,0.467,122,0.531,123,0.467,124,0.531,125,0.531,126,0.939,127,0.467,128,0.801,129,0.693,130,0.826,131,0.467,132,0.467,133,0.531,134,0.467,135,0.878,136,0.167,137,0.467,138,0.353,139,0.531,140,0.467,141,0.467,142,0.693,143,0.467,144,0.467,145,0.914,146,1.109,147,0.531,148,0.939,149,0.531,150,1.087,151,0.531,152,0.787,153,1.4,154,0.693,155,0.693,156,0.787,157,0.787,158,0.787,159,0.787,160,0.787,161,0.787,162,0.531,163,0.787,164,0.467,165,1.146,166,0.408,167,0.408,168,0.353,169,0.531,170,0.605,171,0.531,172,0.408,173,0.787,174,1.093,175,0.531,176,0.531,177,0.787,178,0.531,179,0.693,180,0.531,181,0.531,182,0.408,183,0.531,184,0.467,185,0.531,186,0.787,187,0.95,188,0.531,189,0.467,190,0.467,191,0.353,192,1.109,193,0.531,194,0.787,195,0.531,196,0.531,197,0.693,198,0.531,199,0.531,200,0.531,201,0.531,202,0.467,203,0.787,204,0.914,205,1.038,206,0.787,207,0.787,208,0.531,209,1.109,210,1.038,211,0.531,212,0.531,213,0.408,214,0.353,215,1.034,216,0.531,217,0.787,218,0.531,219,0.721,220,0.531,221,0.939,222,0.853,223,0.531,224,0.531,225,0.531,226,0.531,227,0.531,228,0.531,229,0.531,230,0.531,231,0.531,232,0.787,233,0.787,234,0.531,235,0.787,236,0.787,237,0.531,238,0.531,239,0.531,240,0.531,241,0.531,242,0.939,243,0.939,244,0.939,245,0.531,246,0.939,247,0.939,248,0.531,249,0.939,250,0.787,251,0.787,252,0.787,253,0.531,254,0.787,255,0.787,256,0.531,257,0.787,258,0.787,259,0.531,260,0.787,261,0.939,262,0.531,263,0.531,264,0.531,265,0.408,266,0.95,267,0.605,268,0.531,269,0.353,270,0.408,271,0.914,272,0.531,273,0.531,274,0.787,275,0.787,276,0.531,277,0.531,278,0.531,279,0.531,280,0.939,281,0.531,282,0.467,283,1.038,284,0.531,285,1.038,286,0.531,287,0.531,288,0.531,289,0.531,290,0.531,291,0.531,292,0.467,293,0.787,294,0.531,295,0.531,296,0.531,297,0.531,298,0.531,299,0.531,300,0.531,301,0.531,302,0.787,303,0.531,304,0.531,305,0.531,306,0.531,307,0.531,308,0.939,309,0.531,310,0.531,311,0.531,312,0.531,313,0.721,314,0.531,315,0.408,316,0.531,317,0.531,318,0.531,319,0.531,320,0.531,321,0.531,322,0.693,323,0.531,324,0.531,325,0.531,326,0.531,327,0.531,328,0.531,329,0.531,330,0.531,331,0.531,332,1.284,333,0.531,334,0.531,335,0.531,336,0.531,337,0.531,338,0.531,339,0.531,340,0.531,341,0.408,342,0.787,343,0.531,344,0.531,345,0.531,346,0.531,347,0.531,348,1.038,349,0.939,350,0.531,351,0.531,352,0.531,353,0.97,354,0.531,355,0.531,356,0.531,357,0.531,358,0.531,359,0.531,360,0.787,361,0.531,362,0.531,363,0.531,364,0.531,365,0.531,366,0.531,367,1.109,368,0.787,369,0.787,370,0.531,371,0.531,372,0.787,373,0.787,374,0.787,375,0.531,376,0.939,377,0.787,378,0.531,379,0.531,380,0.531,381,0.531,382,1.038,383,1.109,384,1.038,385,0.939,386,0.939,387,0.531,388,1.109,389,1.038,390,0.531,391,0.787,392,0.787,393,0.787,394,0.787,395,0.531,396,0.531,397,0.531,398,0.531,399,0.531,400,0.531,401,0.531,402,0.531,403,0.531,404,0.531,405,0.531,406,0.531,407,0.787,408,0.531,409,0.787,410,0.531,411,0.531,412,0.531,413,0.531,414,0.531,415,0.531,416,0.531,417,0.531,418,0.531,419,0.531,420,0.531,421,0.531,422,0.531,423,0.531,424,0.531,425,0.787,426,0.787,427,0.787,428,0.787,429,0.787,430,0.787,431,0.531,432,0.787,433,0.787,434,0.531,435,0.531,436,0.025,437,0.025]],["title/interfaces/SnapGrid.html",[0,0.098,60,0.56]],["body/interfaces/SnapGrid.html",[0,0.176,1,0.894,2,0.354,3,0.303,4,0.255,5,0.255,6,0.349,7,0.468,8,0.303,9,0.892,10,1.215,11,1.215,12,1.034,13,0.692,14,0.048,15,0.557,16,0.311,17,0.606,18,0.606,19,0.606,20,0.774,21,0.894,22,0.868,23,0.606,24,0.789,25,0.606,26,0.789,27,0.532,28,0.789,29,0.789,30,0.662,31,0.255,32,1.023,33,0.606,34,0.827,35,0.94,36,0.532,37,0.354,38,0.606,39,0.532,40,0.532,41,0.532,42,0.532,43,0.409,44,1.11,45,0.723,46,0.789,47,0.532,48,0.409,49,0.532,50,0.723,51,0.409,52,0.801,53,0.532,54,0.525,55,0.535,56,0.354,57,0.751,58,0.827,59,1.014,60,0.723,61,0.468,62,0.94,63,0.468,64,1.04,65,0.468,66,0.468,67,0.915,68,0.723,69,0.694,70,0.896,71,0.896,72,0.658,73,1.163,74,1.263,75,0.827,76,0.789,77,0.789,78,0.468,79,0.928,80,1.11,81,0.354,82,0.468,83,0.378,84,0.409,85,0.354,86,0.532,87,0.468,88,0.532,89,0.303,90,0.606,91,0.694,92,0.789,93,0.925,94,0.409,95,0.766,96,0.409,97,0.468,98,0.827,99,0.915,100,0.694,101,0.468,102,0.532,103,0.723,104,0.468,105,0.532,106,0.468,107,0.532,108,0.827,109,0.354,110,0.468,111,0.739,112,0.468,113,0.468,114,0.525,115,0.354,116,0.468,117,0.468,118,1.04,119,0.468,120,0.409,121,0.468,122,0.532,123,0.468,124,0.532,125,0.532,126,0.94,127,0.468,128,0.801,129,0.694,130,0.827,131,0.468,132,0.468,133,0.532,134,0.468,135,0.878,136,0.167,137,0.468,138,0.354,139,0.532,140,0.468,141,0.468,142,0.694,143,0.468,144,0.468,145,0.915,146,1.11,147,0.532,148,0.94,149,0.532,150,1.088,151,0.532,152,0.789,153,1.4,154,0.694,155,0.694,156,0.789,157,0.789,158,0.789,159,0.789,160,0.789,161,0.789,162,0.532,163,0.789,164,0.468,165,1.147,166,0.409,167,0.409,168,0.354,169,0.532,170,0.606,171,0.532,172,0.409,173,0.789,174,1.094,175,0.532,176,0.532,177,0.789,178,0.532,179,0.694,180,0.532,181,0.532,182,0.409,183,0.532,184,0.468,185,0.532,186,0.789,187,0.95,188,0.532,189,0.468,190,0.468,191,0.354,192,1.11,193,0.532,194,0.789,195,0.532,196,0.532,197,0.694,198,0.532,199,0.532,200,0.532,201,0.532,202,0.468,203,0.789,204,0.915,205,1.04,206,0.789,207,0.789,208,0.532,209,1.11,210,1.04,211,0.532,212,0.532,213,0.409,214,0.354,215,1.034,216,0.532,217,0.789,218,0.532,219,0.723,220,0.532,221,0.94,222,0.853,223,0.532,224,0.532,225,0.532,226,0.532,227,0.532,228,0.532,229,0.532,230,0.532,231,0.532,232,0.789,233,0.789,234,0.532,235,0.789,236,0.789,237,0.532,238,0.532,239,0.532,240,0.532,241,0.532,242,0.94,243,0.94,244,0.94,245,0.532,246,0.94,247,0.94,248,0.532,249,0.94,250,0.789,251,0.789,252,0.789,253,0.532,254,0.789,255,0.789,256,0.532,257,0.789,258,0.789,259,0.532,260,0.789,261,0.94,262,0.532,263,0.532,264,0.532,265,0.409,266,0.95,267,0.606,268,0.532,269,0.354,270,0.409,271,0.915,272,0.532,273,0.532,274,0.789,275,0.789,276,0.532,277,0.532,278,0.532,279,0.532,280,0.94,281,0.532,282,0.468,283,1.04,284,0.532,285,1.04,286,0.532,287,0.532,288,0.532,289,0.532,290,0.532,291,0.532,292,0.468,293,0.789,294,0.532,295,0.532,296,0.532,297,0.532,298,0.532,299,0.532,300,0.532,301,0.532,302,0.789,303,0.532,304,0.532,305,0.532,306,0.532,307,0.532,308,0.94,309,0.532,310,0.532,311,0.532,312,0.532,313,0.723,314,0.532,315,0.409,316,0.532,317,0.532,318,0.532,319,0.532,320,0.532,321,0.532,322,0.694,323,0.532,324,0.532,325,0.532,326,0.532,327,0.532,328,0.532,329,0.532,330,0.532,331,0.532,332,1.285,333,0.532,334,0.532,335,0.532,336,0.532,337,0.532,338,0.532,339,0.532,340,0.532,341,0.409,342,0.789,343,0.532,344,0.532,345,0.532,346,0.532,347,0.532,348,1.04,349,0.94,350,0.532,351,0.532,352,0.532,353,0.971,354,0.532,355,0.532,356,0.532,357,0.532,358,0.532,359,0.532,360,0.789,361,0.532,362,0.532,363,0.532,364,0.532,365,0.532,366,0.532,367,1.11,368,0.789,369,0.789,370,0.532,371,0.532,372,0.789,373,0.789,374,0.789,375,0.532,376,0.94,377,0.789,378,0.532,379,0.532,380,0.532,381,0.532,382,1.04,383,1.11,384,1.04,385,0.94,386,0.94,387,0.532,388,1.11,389,1.04,390,0.532,391,0.789,392,0.789,393,0.789,394,0.789,395,0.532,396,0.532,397,0.532,398,0.532,399,0.532,400,0.532,401,0.532,402,0.532,403,0.532,404,0.532,405,0.532,406,0.532,407,0.789,408,0.532,409,0.789,410,0.532,411,0.532,412,0.532,413,0.532,414,0.532,415,0.532,416,0.532,417,0.532,418,0.532,419,0.532,420,0.532,421,0.532,422,0.532,423,0.532,424,0.532,425,0.789,426,0.789,427,0.789,428,0.789,429,0.789,430,0.789,431,0.532,432,0.789,433,0.789,434,0.532,435,0.532,436,0.025,437,0.025]],["title/interfaces/TimeLongPress.html",[0,0.098,75,0.641]],["body/interfaces/TimeLongPress.html",[0,0.176,1,0.894,2,0.355,3,0.303,4,0.255,5,0.255,6,0.349,7,0.469,8,0.303,9,0.893,10,1.193,11,1.193,12,1.035,13,0.692,14,0.048,15,0.558,16,0.311,17,0.607,18,0.607,19,0.607,20,0.774,21,0.894,22,0.868,23,0.607,24,0.79,25,0.607,26,0.79,27,0.533,28,0.79,29,0.79,30,0.45,31,0.255,32,1.024,33,0.607,34,0.828,35,0.941,36,0.533,37,0.355,38,0.607,39,0.533,40,0.533,41,0.533,42,0.533,43,0.409,44,1.111,45,0.723,46,0.79,47,0.533,48,0.409,49,0.533,50,0.723,51,0.409,52,0.802,53,0.533,54,0.525,55,0.536,56,0.355,57,0.752,58,0.828,59,1.015,60,0.607,61,0.469,62,0.941,63,0.469,64,1.04,65,0.469,66,0.469,67,0.915,68,0.723,69,0.695,70,0.896,71,0.896,72,0.659,73,1.164,74,1.263,75,0.915,76,1.111,77,1.111,78,0.469,79,0.928,80,1.111,81,0.355,82,0.469,83,0.378,84,0.409,85,0.355,86,0.533,87,0.469,88,0.533,89,0.303,90,0.607,91,0.695,92,0.79,93,0.926,94,0.409,95,0.766,96,0.409,97,0.469,98,0.828,99,0.915,100,0.695,101,0.469,102,0.533,103,0.723,104,0.469,105,0.533,106,0.469,107,0.533,108,0.828,109,0.355,110,0.469,111,0.739,112,0.469,113,0.469,114,0.525,115,0.355,116,0.469,117,0.469,118,1.04,119,0.469,120,0.409,121,0.469,122,0.533,123,0.469,124,0.533,125,0.533,126,0.941,127,0.469,128,0.802,129,0.695,130,0.828,131,0.469,132,0.469,133,0.533,134,0.469,135,0.879,136,0.167,137,0.469,138,0.355,139,0.533,140,0.469,141,0.469,142,0.695,143,0.469,144,0.469,145,0.915,146,1.111,147,0.533,148,0.941,149,0.533,150,1.088,151,0.533,152,0.79,153,1.401,154,0.695,155,0.695,156,0.79,157,0.79,158,0.79,159,0.79,160,0.79,161,0.79,162,0.533,163,0.79,164,0.469,165,1.147,166,0.409,167,0.409,168,0.355,169,0.533,170,0.607,171,0.533,172,0.409,173,0.79,174,1.094,175,0.533,176,0.533,177,0.79,178,0.533,179,0.695,180,0.533,181,0.533,182,0.409,183,0.533,184,0.469,185,0.533,186,0.79,187,0.951,188,0.533,189,0.469,190,0.469,191,0.355,192,1.111,193,0.533,194,0.79,195,0.533,196,0.533,197,0.695,198,0.533,199,0.533,200,0.533,201,0.533,202,0.469,203,0.79,204,0.915,205,1.04,206,0.79,207,0.79,208,0.533,209,1.111,210,1.04,211,0.533,212,0.533,213,0.409,214,0.355,215,1.035,216,0.533,217,0.79,218,0.533,219,0.723,220,0.533,221,0.941,222,0.854,223,0.533,224,0.533,225,0.533,226,0.533,227,0.533,228,0.533,229,0.533,230,0.533,231,0.533,232,0.79,233,0.79,234,0.533,235,0.79,236,0.79,237,0.533,238,0.533,239,0.533,240,0.533,241,0.533,242,0.941,243,0.941,244,0.941,245,0.533,246,0.941,247,0.941,248,0.533,249,0.941,250,0.79,251,0.79,252,0.79,253,0.533,254,0.79,255,0.79,256,0.533,257,0.79,258,0.79,259,0.533,260,0.79,261,0.941,262,0.533,263,0.533,264,0.533,265,0.409,266,0.951,267,0.607,268,0.533,269,0.355,270,0.409,271,0.915,272,0.533,273,0.533,274,0.79,275,0.79,276,0.533,277,0.533,278,0.533,279,0.533,280,0.941,281,0.533,282,0.469,283,1.04,284,0.533,285,1.04,286,0.533,287,0.533,288,0.533,289,0.533,290,0.533,291,0.533,292,0.469,293,0.79,294,0.533,295,0.533,296,0.533,297,0.533,298,0.533,299,0.533,300,0.533,301,0.533,302,0.79,303,0.533,304,0.533,305,0.533,306,0.533,307,0.533,308,0.941,309,0.533,310,0.533,311,0.533,312,0.533,313,0.723,314,0.533,315,0.409,316,0.533,317,0.533,318,0.533,319,0.533,320,0.533,321,0.533,322,0.695,323,0.533,324,0.533,325,0.533,326,0.533,327,0.533,328,0.533,329,0.533,330,0.533,331,0.533,332,1.285,333,0.533,334,0.533,335,0.533,336,0.533,337,0.533,338,0.533,339,0.533,340,0.533,341,0.409,342,0.79,343,0.533,344,0.533,345,0.533,346,0.533,347,0.533,348,1.04,349,0.941,350,0.533,351,0.533,352,0.533,353,0.971,354,0.533,355,0.533,356,0.533,357,0.533,358,0.533,359,0.533,360,0.79,361,0.533,362,0.533,363,0.533,364,0.533,365,0.533,366,0.533,367,1.111,368,0.79,369,0.79,370,0.533,371,0.533,372,0.79,373,0.79,374,0.79,375,0.533,376,0.941,377,0.79,378,0.533,379,0.533,380,0.533,381,0.533,382,1.04,383,1.111,384,1.04,385,0.941,386,0.941,387,0.533,388,1.111,389,1.04,390,0.533,391,0.79,392,0.79,393,0.79,394,0.79,395,0.533,396,0.533,397,0.533,398,0.533,399,0.533,400,0.533,401,0.533,402,0.533,403,0.533,404,0.533,405,0.533,406,0.533,407,0.79,408,0.533,409,0.79,410,0.533,411,0.533,412,0.533,413,0.533,414,0.533,415,0.533,416,0.533,417,0.533,418,0.533,419,0.533,420,0.533,421,0.533,422,0.533,423,0.533,424,0.533,425,0.79,426,0.79,427,0.79,428,0.79,429,0.79,430,0.79,431,0.533,432,0.79,433,0.79,434,0.533,435,0.533,436,0.025,437,0.025]],["title/changelog.html",[136,0.193,191,0.408,533,2.414]],["body/changelog.html",[0,0.091,1,0.52,4,0.324,6,0.461,8,0.534,10,0.595,11,0.595,14,0.034,15,0.449,16,0.424,20,0.716,22,0.773,30,0.736,33,0.721,37,0.773,52,0.45,55,0.751,57,0.385,60,0.893,67,0.595,68,0.827,72,0.685,79,0.978,82,0.595,83,0.515,85,0.624,89,0.661,91,0.595,94,0.721,95,0.844,96,0.721,97,0.825,98,0.595,99,1.192,100,0.595,101,0.946,104,1.224,106,1.021,108,1.138,109,0.877,110,0.825,112,0.946,113,0.825,114,0.84,115,0.624,116,0.595,117,1.021,119,0.595,120,0.52,123,0.595,127,0.595,128,0.624,130,0.946,131,0.946,132,0.595,134,0.595,135,0.624,136,0.338,137,0.595,138,0.861,140,0.595,142,0.825,143,1.073,144,0.595,145,0.946,154,0.595,155,0.595,164,0.825,165,0.595,168,0.45,179,1.266,184,0.595,189,0.825,190,0.825,197,1.021,202,0.595,204,0.825,214,0.716,271,0.595,282,1.021,292,0.595,322,0.595,436,0.03,437,0.03,438,1.709,439,2.397,474,1.838,475,2.546,476,1.838,477,1.838,486,1.838,505,1.838,507,1.838,521,2.546,534,5.478,535,2.665,536,2.665,537,2.665,538,2.665,539,2.665,540,2.665,541,2.665,542,3.692,543,4.968,544,4.236,545,4.453,546,3.692,547,2.665,548,5.682,549,2.665,550,2.665,551,2.665,552,2.665,553,5.634,554,4.421,555,3.692,556,3.444,557,2.733,558,2.665,559,4.236,560,2.665,561,2.665,562,2.665,563,2.665,564,2.665,565,3.904,566,4.968,567,4.573,568,2.167,569,2.665,570,2.665,571,2.167,572,2.665,573,2.665,574,3.692,575,4.573,576,2.665,577,2.665,578,2.665,579,2.665,580,3.692,581,3.692,582,2.167,583,2.665,584,2.665,585,2.665,586,2.665,587,3.692,588,5.392,589,2.665,590,3.692,591,2.665,592,2.665,593,2.665,594,2.665,595,3.692,596,2.665,597,3.444,598,4.573,599,4.221,600,1.838,601,2.167,602,2.665,603,3.692,604,2.665,605,2.665,606,2.665,607,4.236,608,2.665,609,2.665,610,2.665,611,3.692,612,3.692,613,2.665,614,2.665,615,3.692,616,3.001,617,3.692,618,3.692,619,2.665,620,2.665,621,2.665,622,2.665,623,2.665,624,2.665,625,4.968,626,2.665,627,2.665,628,2.665,629,2.665,630,2.665,631,3.692,632,3.692,633,2.665,634,2.665,635,2.665,636,5.438,637,2.665,638,2.665,639,2.665,640,2.665,641,2.665,642,2.665,643,2.665,644,3.692,645,2.665,646,4.236,647,2.665,648,2.167,649,2.665,650,2.665,651,3.692,652,4.573,653,2.665,654,4.236,655,4.236,656,2.665,657,4.573,658,3.444,659,2.665,660,2.665,661,2.665,662,2.665,663,2.665,664,2.665,665,2.665,666,5.193,667,4.236,668,2.665,669,5.193,670,4.573,671,2.665,672,2.665,673,2.167,674,2.665,675,3.692,676,2.665,677,2.665,678,3.692,679,2.665,680,2.665,681,2.665,682,3.692,683,3.692,684,2.665,685,2.665,686,2.665,687,2.665,688,2.665,689,4.573,690,4.573,691,2.665,692,2.665,693,4.573,694,4.573,695,3.444,696,2.665,697,5.392,698,5.392,699,2.665,700,3.692,701,3.692,702,2.665,703,4.236,704,2.665,705,4.573,706,2.665,707,2.665,708,3.692,709,2.665,710,2.665,711,2.665,712,2.665,713,2.665,714,2.665,715,2.665,716,2.665,717,2.665,718,2.665,719,2.665,720,2.665,721,2.665,722,2.167,723,2.665,724,2.665,725,2.665,726,2.665,727,2.665,728,2.665,729,4.573,730,2.665,731,2.665,732,2.665,733,2.665,734,2.665,735,2.665,736,2.665,737,4.573,738,2.665,739,2.665,740,2.665,741,2.665,742,2.665,743,3.692,744,4.236,745,2.665,746,2.665,747,2.167,748,2.665,749,2.665,750,3.692,751,4.236,752,2.665,753,2.665,754,3.692,755,2.665,756,2.665,757,2.167,758,2.665,759,2.665,760,2.665,761,2.665,762,2.665,763,2.167,764,2.665,765,2.665,766,2.665,767,2.665,768,2.665,769,5.337,770,3.692,771,2.665,772,2.665,773,4.236,774,2.665,775,2.665,776,2.665,777,2.665,778,2.665,779,2.665,780,2.665,781,2.665,782,3.444,783,2.665,784,2.665,785,2.665,786,2.665,787,2.665,788,2.665,789,3.692,790,2.665,791,2.665,792,2.665,793,2.665,794,2.665,795,2.665,796,2.665,797,2.665,798,4.236,799,2.665,800,2.665,801,2.167,802,2.665,803,2.665,804,2.665,805,2.665,806,3.692,807,2.665,808,2.665,809,2.665,810,2.665,811,2.665,812,2.665,813,2.665,814,2.665,815,2.665,816,2.665,817,2.665,818,2.665,819,2.665,820,2.665,821,2.167,822,2.665,823,2.665,824,2.665,825,2.665,826,2.665,827,2.665,828,2.167,829,2.665,830,2.665,831,2.167,832,2.665,833,2.665,834,2.665,835,2.665]],["title/dependencies.html",[557,2.058,695,1.962]],["body/dependencies.html",[14,0.044,31,0.557,436,0.042,437,0.042,556,3.724,557,2.738,836,4.581]],["title/miscellaneous/functions.html",[469,1.805,837,1.443]],["body/miscellaneous/functions.html",[5,0.55,6,0.361,8,0.654,14,0.044,30,0.654,70,0.764,71,0.872,269,0.872,436,0.042,437,0.042,465,3.119,469,2.37,470,3.558,485,3.119,526,3.676,837,2.702,838,4.522,839,4.522,840,5.414]],["title/index.html",[8,0.349,136,0.193,191,0.408]],["body/index.html",[3,0.699,6,0.427,14,0.047,15,0.629,31,0.492,33,0.79,52,0.874,72,0.492,81,0.684,83,0.588,87,0.904,89,0.819,94,0.79,95,0.819,96,0.79,109,0.817,111,0.684,120,0.79,121,0.904,129,0.904,136,0.386,141,0.904,436,0.039,437,0.039,439,2.534,442,3.29,444,3.931,545,3.29,554,4.518,557,2.418,571,4.604,582,3.29,597,3.29,599,3.931,600,2.791,601,3.931,648,3.29,658,3.29,673,3.931,722,3.931,747,3.931,757,3.29,763,4.518,801,3.931,821,3.931,841,4.836,842,5.172,843,4.836,844,4.047,845,5.618,846,5.358,847,2.791,848,4.047,849,4.047,850,4.047,851,4.047,852,5.172,853,4.047,854,4.047,855,5.172,856,4.047,857,4.836,858,4.047,859,4.047,860,4.047,861,4.047,862,4.047,863,4.047,864,4.047,865,4.047,866,4.047,867,4.047,868,4.047,869,4.047,870,4.047,871,4.047,872,4.047,873,4.047,874,4.047,875,4.047,876,4.047,877,4.836,878,4.047,879,4.047,880,4.047,881,5.476,882,4.047,883,4.047,884,4.047,885,4.047,886,3.29]],["title/license.html",[136,0.193,191,0.408,847,1.665]],["body/license.html",[4,0.522,14,0.04,32,0.958,34,0.958,52,0.725,72,0.522,109,0.846,436,0.04,437,0.04,565,3.486,568,4.307,600,2.957,616,3.486,847,2.957,886,4.068,887,5.299,888,4.288,889,4.288,890,4.288,891,5.004,892,4.288,893,4.288,894,4.288,895,4.288,896,5.004,897,4.288,898,5.459,899,5.75,900,4.288,901,5.004,902,5.299,903,4.288,904,5.004,905,4.288,906,4.288,907,4.288,908,4.288,909,4.288,910,4.288,911,4.288,912,4.288,913,4.288,914,4.288,915,4.288,916,4.288,917,5.004,918,5.004,919,4.288,920,4.288,921,5.004,922,4.288,923,4.288,924,4.288,925,4.288,926,4.288,927,4.288,928,4.288,929,4.288,930,4.288,931,4.288,932,4.288,933,4.288,934,4.288,935,4.288,936,4.288,937,4.288,938,4.288,939,4.288,940,4.288,941,4.288,942,4.288]],["title/modules.html",[438,1.798]],["body/modules.html",[14,0.042,436,0.042,437,0.042,438,2.124,439,2.405,943,4.588]],["title/overview.html",[944,3.158]],["body/overview.html",[0,0.157,14,0.042,16,0.458,436,0.042,437,0.042,438,2.117,782,3.718,828,3.718,831,3.718,944,3.718]],["title/miscellaneous/typealiases.html",[837,1.443,945,3.444]],["body/miscellaneous/typealiases.html",[5,0.554,6,0.363,7,1.018,8,0.659,13,0.77,14,0.042,68,1.06,436,0.042,437,0.042,469,2.388,837,2.723,946,4.557,947,4.557]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["0.1.0",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["06396e6",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["0a95ac7",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":831,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":782,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["12",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["1265bee",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":828,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["2.0.0",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":565,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["22530b9",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["4.0.1",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["4.1.0",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["4.2.0",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["44ea67",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["48d4fe6",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["4c9224b",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["4f23661",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["5.5.x",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["538f9b7",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["566bf78",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["5995f81",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["5ae52a7",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["6.0",{"_index":841,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["6016f12",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["67d3a5e",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["6e0a1a3",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["700fef1",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["76852bc",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["78",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["7e50d74",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":879,"title":{},"body":{"index.html":{}}}],["81",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["85",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["897b3fe",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["9831d36",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["9b5a6b0",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["9d0f754",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":916,"title":{},"body":{"license.html":{}}}],["account",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":937,"title":{},"body":{"license.html":{}}}],["activelongpressdrag",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["actual",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["ad",{"_index":475,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["add",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":946,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["along",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["altern",{"_index":863,"title":{},"body":{"index.html":{}}}],["alway",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":910,"title":{},"body":{"license.html":{}}}],["angular",{"_index":554,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["angular/cor",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"dependencies.html":{},"index.html":{}}}],["any).eventlistenersubscriptions[typ",{"_index":407,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["api",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":673,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["append",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["appli",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["aris",{"_index":941,"title":{},"body":{"license.html":{}}}],["assign",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["associ",{"_index":900,"title":{},"body":{"license.html":{}}}],["author",{"_index":930,"title":{},"body":{"license.html":{}}}],["auto",{"_index":801,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["automat",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["awesom",{"_index":867,"title":{},"body":{"index.html":{}}}],["axi",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["back",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["be",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["bebd925",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["behaviour",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["bfe9bb4",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["bodi",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["boolean",{"_index":59,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["bootstrap",{"_index":853,"title":{},"body":{"index.html":{}}}],["bound",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":943,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":888,"title":{},"body":{"license.html":{}}}],["c174023",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["c428eed",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["c5ef775",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["c6771eb",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["calledcount",{"_index":311,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["cancel",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["canceldrag",{"_index":64,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["canceldrag$.complet",{"_index":312,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["canceldrag$.pip",{"_index":309,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["candrag",{"_index":348,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["case",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":381,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["caus",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["cdk",{"_index":868,"title":{},"body":{"index.html":{}}}],["cf1bc61",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["cfff617",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["chain",{"_index":185,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["chang",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":533,"title":{"changelog.html":{}},"body":{}}],["changes.dragaxi",{"_index":340,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["charg",{"_index":895,"title":{},"body":{"license.html":{}}}],["check",{"_index":866,"title":{},"body":{"index.html":{}}}],["checkeventlisten",{"_index":347,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["child",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["claim",{"_index":933,"title":{},"body":{"license.html":{}}}],["class",{"_index":83,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["click",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["clienti",{"_index":71,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":471,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["clientx",{"_index":70,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":271,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["clone.appendchild(nod",{"_index":301,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["clone.innerhtml",{"_index":296,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["clone.parentelement!.removechild(clon",{"_index":305,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["close",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["combinelatest",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["combinelatest(this.pointermov",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["come",{"_index":873,"title":{},"body":{"index.html":{}}}],["commit",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":521,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["compon",{"_index":821,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["condit",{"_index":915,"title":{},"body":{"license.html":{}}}],["config",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":942,"title":{},"body":{"license.html":{}}}],["console.log('el",{"_index":859,"title":{},"body":{"index.html":{}}}],["const",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["constructor",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["constructor(el",{"_index":524,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["contain",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["container.direct",{"_index":56,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["content",{"_index":648,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["continu",{"_index":883,"title":{},"body":{"index.html":{}}}],["contract",{"_index":938,"title":{},"body":{"license.html":{}}}],["control",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["coordin",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["copi",{"_index":898,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":887,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["creat",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["css",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["current",{"_index":141,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"index.html":{}}}],["currentdrag",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["currentdrag$.complet",{"_index":316,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["currentdrag$.next",{"_index":337,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["currentdragdata",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["currentdragdropdata",{"_index":495,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["currentdragsubscript",{"_index":487,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["cursor",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["custom",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["customis",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["d010733",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["d233788",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["d72e16b",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":934,"title":{},"body":{"license.html":{}}}],["data",{"_index":87,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"index.html":{}}}],["date.now",{"_index":386,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dc0f863",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["dd3e89",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":901,"title":{},"body":{"license.html":{}}}],["declar",{"_index":442,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["default",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["defin",{"_index":448,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["delet",{"_index":376,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["deltascrol",{"_index":422,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["deltascroll.left",{"_index":427,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["deltascroll.top",{"_index":429,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["deltatot",{"_index":430,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["deltax",{"_index":425,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["deltay",{"_index":428,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["demo",{"_index":842,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":852,"title":{},"body":{"index.html":{}}}],["demomodul",{"_index":854,"title":{},"body":{"index.html":{}}}],["depend",{"_index":557,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["deregist",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["deregisterscrolllisten",{"_index":493,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["destroy",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["dev",{"_index":757,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["develop",{"_index":846,"title":{},"body":{"index.html":{}}}],["devic",{"_index":132,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["didn't",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":518,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dimens",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["direct",{"_index":16,"title":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"overview.html":{}}}],["directli",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["directori",{"_index":875,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["dispos",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchang",{"_index":468,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["distribut",{"_index":908,"title":{},"body":{"license.html":{}}}],["do",{"_index":508,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["document",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["document.documentelement.scrollleft",{"_index":419,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["document.documentelement.scrolltop",{"_index":417,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["don't",{"_index":597,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dont",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":95,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["drag$.pip",{"_index":496,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["drag$.subscrib",{"_index":520,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragactiveclass",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["draganddropmodul",{"_index":439,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["dragaxi",{"_index":58,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragaxix",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["dragcancel",{"_index":67,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["dragcomplet",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragcontain",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["dragcursor=\"mov",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["dragend",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["dragend(ev",{"_index":858,"title":{},"body":{"index.html":{}}}],["dragenddata",{"_index":308,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragended$.subscrib",{"_index":302,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragendev",{"_index":66,"title":{"interfaces/DragEndEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragent",{"_index":480,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["draggabl",{"_index":6,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["draggable.direct",{"_index":445,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirect",{"_index":84,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["draggablehelp",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["draggablescrollcontainerdirect",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragleav",{"_index":481,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragmoveev",{"_index":65,"title":{"interfaces/DragMoveEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragov",{"_index":482,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoveract",{"_index":503,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoverclass",{"_index":477,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["dragpointerdown",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["dragpointerdownev",{"_index":61,"title":{"interfaces/DragPointerDownEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragsnapgrid",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["dragstart",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["dragstarted$.subscrib",{"_index":263,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dragstartev",{"_index":63,"title":{"interfaces/DragStartEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["drop",{"_index":89,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["drop.module.t",{"_index":441,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["dropev",{"_index":464,"title":{"interfaces/DropEvent.html":{}},"body":{"interfaces/DropEvent.html":{}}}],["droppabl",{"_index":599,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["droppable.direct",{"_index":446,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.j",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.j",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["droppable/dist/umd/angular",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["droppable/doc",{"_index":862,"title":{},"body":{"index.html":{}}}],["droppable/issues/61",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["droppable/src/lib/drag",{"_index":440,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable/src/lib/draggable.directive.t",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/draggable.directive.ts:101",{"_index":452,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:107",{"_index":454,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:113",{"_index":457,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:119",{"_index":458,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:125",{"_index":451,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:131",{"_index":449,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:137",{"_index":455,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:143",{"_index":456,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:149",{"_index":461,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:157",{"_index":462,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:163",{"_index":463,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:169",{"_index":460,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:175",{"_index":459,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:89",{"_index":453,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:95",{"_index":450,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/droppable.directive.t",{"_index":465,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["droppable/src/lib/droppable.directive.ts:43",{"_index":528,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:49",{"_index":527,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:55",{"_index":529,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:61",{"_index":530,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:67",{"_index":531,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:73",{"_index":532,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:75",{"_index":525,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppabledirect",{"_index":443,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableel",{"_index":490,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.rect",{"_index":497,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.scrollcontainerrect",{"_index":498,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.updatecach",{"_index":494,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppablethen",{"_index":851,"title":{},"body":{"index.html":{}}}],["droppeddata",{"_index":857,"title":{},"body":{"index.html":{}}}],["duplic",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["durat",{"_index":433,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["e",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["each",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["ecc96ec",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["edg",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["ee1d06c",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["elementref",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["emit",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["end",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":871,"title":{},"body":{"index.html":{}}}],["error",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["even",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":72,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.canceldrag$.emit",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.changedtouches[0].clienti",{"_index":398,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.changedtouches[0].clientx",{"_index":397,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.clienti",{"_index":374,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.clientx",{"_index":373,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.i",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["event.preventdefault",{"_index":380,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.touches[0].clienti",{"_index":394,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.touches[0].clientx",{"_index":393,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["event.x",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["eventemitt",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["eventlistenersubscript",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["events:non",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":57,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["expos",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":923,"title":{},"body":{"license.html":{}}}],["extend",{"_index":62,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["f29b424",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["f36ed2d",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["f51214e",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["f6a5cd",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["f936805",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["f98f586",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["fa8434b",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["fb75711",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":545,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":45,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["filter(([didoverlap",{"_index":517,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["filter(([previ",{"_index":324,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["filter(nod",{"_index":298,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["find",{"_index":860,"title":{},"body":{"index.html":{}}}],["fire",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":926,"title":{},"body":{"license.html":{}}}],["fix",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["follow",{"_index":914,"title":{},"body":{"license.html":{}}}],["foreach(nod",{"_index":300,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["forroot",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":894,"title":{},"body":{"license.html":{}}}],["function",{"_index":469,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["furnish",{"_index":913,"title":{},"body":{"license.html":{}}}],["gener",{"_index":861,"title":{},"body":{"index.html":{}}}],["get",{"_index":191,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["getscrollposit",{"_index":413,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ghost",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["ghostdragen",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["ghostel",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ghostelementappendto",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["ghostelementcr",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["ghostelementcreatedev",{"_index":78,"title":{"interfaces/GhostElementCreatedEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ghostelementtempl",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["global",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["globaldragstyl",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["grant",{"_index":893,"title":{},"body":{"license.html":{}}}],["grid",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["guidelin",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["hack",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["hascontainerscrollbar",{"_index":382,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["haseventlisten",{"_index":349,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["height",{"_index":289,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["helper",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["helper.provid",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["here",{"_index":855,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":892,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["higher",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":931,"title":{},"body":{"license.html":{}}}],["hover",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["htmlelement",{"_index":80,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["htmlstyleel",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["https://github.com/mattlewis92/angular",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":843,"title":{},"body":{"index.html":{}}}],["icon",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["immedi",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["impli",{"_index":924,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":568,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["inject",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["inject(docu",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["input",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["insert",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["insid",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["instal",{"_index":845,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":299,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["interact",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"overview.html":{}}}],["iscoordinatewithinrectangl",{"_index":470,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":839,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isdragactiv",{"_index":383,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["iswithinel",{"_index":500,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["item",{"_index":856,"title":{},"body":{"index.html":{}}}],["key",{"_index":409,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["kind",{"_index":922,"title":{},"body":{"license.html":{}}}],["lazili",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["leav",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":285,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["lettabl",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":890,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":935,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":932,"title":{},"body":{"license.html":{}}}],["librari",{"_index":747,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["licenc",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":847,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":904,"title":{},"body":{"license.html":{}}}],["line",{"_index":484,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["listen",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":874,"title":{},"body":{"index.html":{}}}],["lock",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["loosen",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["maintain",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["map(([pointermoveev",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["map(([previ",{"_index":330,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["map(calledcount",{"_index":310,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["map(movedata",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["map(valu",{"_index":321,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["margin",{"_index":292,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["match",{"_index":437,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["math.ab",{"_index":426,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["math.abs(movescrollposition.left",{"_index":424,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["math.abs(movescrollposition.top",{"_index":423,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["math.round(movedata.transformi",{"_index":248,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["math.round(movedata.transformx",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["matt",{"_index":889,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":925,"title":{},"body":{"license.html":{}}}],["merg",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"license.html":{}}}],["merge(dragcomplet",{"_index":317,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mergemap",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mergemap((pointerdownev",{"_index":178,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mergemap(dragenddata",{"_index":307,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["metadata",{"_index":447,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["migrat",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["mimic",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["miscellan",{"_index":837,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":886,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":906,"title":{},"body":{"license.html":{}}}],["modul",{"_index":438,"title":{"modules/DragAndDropModule.html":{},"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"modules.html":{},"overview.html":{}}}],["mous",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["mousedown",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["mouseent",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mouseev",{"_index":73,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mouseleav",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mousemov",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mousemoveev",{"_index":368,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mousemoveevent.clienti",{"_index":371,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mousemoveevent.clientx",{"_index":370,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mouseup",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["move",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["movedata",{"_index":249,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["movedata.scrollleft",{"_index":253,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["movedata.scrolltop",{"_index":256,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["movedata.transformi",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["movedata.transformx",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["movescrollposit",{"_index":421,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["moz",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ms",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["mwldraggabl",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["mwldroppabl",{"_index":474,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["name",{"_index":485,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":722,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["new",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["next",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["next.i",{"_index":329,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["next.x",{"_index":327,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ng",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["ng4",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":444,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":339,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ngondestroy",{"_index":341,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ngoninit",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ngzone",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["node",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["node.j",{"_index":872,"title":{},"body":{"index.html":{}}}],["none",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["noninfring",{"_index":929,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":917,"title":{},"body":{"license.html":{}}}],["now",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":571,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["number",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["o",{"_index":336,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["object",{"_index":86,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["object.keys(styles).foreach(key",{"_index":410,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach(typ",{"_index":406,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":350,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["observ",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["observable(observ",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["observer.next(",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["obtain",{"_index":897,"title":{},"body":{"license.html":{}}}],["old",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["on",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"index.html":{}}}],["onc",{"_index":658,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchang",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ondestroy",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["oninit",{"_index":17,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["onmousedown(ev",{"_index":366,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["onmouseent",{"_index":399,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["onmouseleav",{"_index":401,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["onmouseup(ev",{"_index":375,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ontouchend(ev",{"_index":395,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["ontouchstart(ev",{"_index":378,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["oper",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["otherwis",{"_index":940,"title":{},"body":{"license.html":{}}}],["out",{"_index":600,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["output",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["outsid",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":476,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["overlap",{"_index":479,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(distinctuntilchang",{"_index":502,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(filter(overlapsnow",{"_index":514,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapschang",{"_index":501,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow",{"_index":511,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow)).subscrib",{"_index":515,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overview",{"_index":944,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrit",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["packag",{"_index":695,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":43,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["paramet",{"_index":526,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["part",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":927,"title":{},"body":{"license.html":{}}}],["pass",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["path",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":556,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["perform",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":891,"title":{},"body":{"license.html":{}}}],["permit",{"_index":912,"title":{},"body":{"license.html":{}}}],["person",{"_index":896,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pipe(filter(overlapsnow",{"_index":510,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["pipe(shar",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pipe(take(1",{"_index":318,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointer",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["pointerdown",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerdownevent.clienti",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerdownevent.clientx",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerdownevent.event.stoppropag",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerdrag",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerdragged$.pip",{"_index":320,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerdragged$.pipe(pairwis",{"_index":323,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerev",{"_index":69,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointermov",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointermove.pip",{"_index":260,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointermoveevent.clienti",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointermoveevent.clientx",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["pointerup",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["port",{"_index":878,"title":{},"body":{"index.html":{}}}],["portion",{"_index":920,"title":{},"body":{"license.html":{}}}],["posit",{"_index":282,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["power",{"_index":848,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":870,"title":{},"body":{"index.html":{}}}],["preserv",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["press",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["prevent",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["previou",{"_index":325,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["previous.i",{"_index":328,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["previous.x",{"_index":326,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["privat",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["project",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["projects/.../draggable.directive.t",{"_index":947,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../droppable.directive.t",{"_index":838,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/angular",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["propag",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["properti",{"_index":9,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["prototyp",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":616,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["public",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":907,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":928,"title":{},"body":{"license.html":{}}}],["readm",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["recalcul",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["recommend",{"_index":865,"title":{},"body":{"index.html":{}}}],["recomput",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":269,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"miscellaneous/functions.html":{}}}],["rect.height}px",{"_index":290,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["rect.left",{"_index":472,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.left}px",{"_index":286,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["rect.top",{"_index":473,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.top}px",{"_index":284,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["rect.width}px",{"_index":288,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["rectangl",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["regular",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":884,"title":{},"body":{"index.html":{}}}],["releaselicens",{"_index":885,"title":{},"body":{"index.html":{}}}],["reload",{"_index":880,"title":{},"body":{"index.html":{}}}],["remov",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["renam",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["renderer2",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["replaysubject",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["repliat",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":876,"title":{},"body":{"index.html":{}}}],["requir",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["restor",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":903,"title":{},"body":{"license.html":{}}}],["result",{"_index":436,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["revert",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":905,"title":{},"body":{"license.html":{}}}],["round",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":763,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["safari",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["same",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":850,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["scroll.left",{"_index":239,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scroll.top",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scrollabl",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["scrollcontain",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scrollcontainerrect",{"_index":492,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["scrollcontainerscrol",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scrollcontainerscroll$).pip",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scrolli",{"_index":255,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scrollleft",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scrolltop",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["scrollx",{"_index":252,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["seamless",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":505,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["select",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["selector",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"index.html":{}}}],["sell",{"_index":911,"title":{},"body":{"license.html":{}}}],["server",{"_index":877,"title":{},"body":{"index.html":{}}}],["set",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["setcursor(valu",{"_index":403,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["setelementstyl",{"_index":408,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["shall",{"_index":918,"title":{},"body":{"license.html":{}}}],["share",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["shouldbegindrag",{"_index":420,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["show",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["showoriginalelementwhiledrag",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["side",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["simplechang",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["skyhook",{"_index":869,"title":{},"body":{"index.html":{}}}],["snap",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["snapgrid",{"_index":60,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["softwar",{"_index":899,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"index.html":{}}}],["standard",{"_index":486,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["start",{"_index":136,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{}}}],["startscrollposit",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["startscrollposition.left",{"_index":254,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["startscrollposition.top",{"_index":257,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["startwith",{"_index":47,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["startwith(startscrollposit",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["stop",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["string",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"index.html":{}}}],["style",{"_index":197,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["styles[key",{"_index":412,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["subject",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"license.html":{}}}],["sublicens",{"_index":909,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":313,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["subscript",{"_index":467,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["substanti",{"_index":919,"title":{},"body":{"license.html":{}}}],["system.j",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":466,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["tabl",{"_index":844,"title":{},"body":{"index.html":{}}}],["take",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["take(1",{"_index":261,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["takelast",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["takelast(1",{"_index":262,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["takeuntil",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["takeuntil(dragcomplet",{"_index":259,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["templat",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"index.html":{}}}],["templateref",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["test",{"_index":881,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":882,"title":{},"body":{"index.html":{}}}],["text",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["text/css",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["there'",{"_index":506,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.candrag",{"_index":177,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.checkeventlisten",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.currentdragsubscript",{"_index":488,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.currentdragsubscription.unsubscrib",{"_index":523,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.destroy",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.destroy$.next",{"_index":346,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.document.head.appendchild(globaldragstyl",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.document.head.removechild(globaldragstyl",{"_index":319,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragactiveclass",{"_index":267,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragaxis.i",{"_index":251,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragaxis.x",{"_index":250,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragcursor",{"_index":291,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragend.next",{"_index":314,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragenter.next",{"_index":513,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":306,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.draggablehelper.currentdrag.subscrib",{"_index":489,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragging.next",{"_index":331,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragleave.next",{"_index":519,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragover.next",{"_index":516,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragoverclass",{"_index":512,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragpointerdown.next",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragsnapgrid.i",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragsnapgrid.x",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.dragstart.next",{"_index":264,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.drop.next",{"_index":522,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dropdata",{"_index":338,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.element.nativeel",{"_index":266,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.element.nativeelement.clonenod",{"_index":272,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":270,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.element.nativeelement.nexts",{"_index":279,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.element.nativeelement.parentnode!.insertbefor",{"_index":278,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":352,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.mouseent",{"_index":362,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.mouseleav",{"_index":364,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.mousemov",{"_index":367,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":355,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":361,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":359,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.touchmov",{"_index":388,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":357,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.getscrollposit",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ghostdragen",{"_index":268,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ghostel",{"_index":280,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ghostelementappendto",{"_index":276,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ghostelementappendto.appendchild(clon",{"_index":277,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ghostelementcreated.emit",{"_index":304,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ghostelementtempl",{"_index":293,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.onmousedown(ev",{"_index":354,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.onmouseent",{"_index":363,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.onmouseleav",{"_index":365,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.onmouseup(ev",{"_index":356,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ontouchend(ev",{"_index":360,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.ontouchstart(ev",{"_index":358,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointerdown",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointerdown$.complet",{"_index":343,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointerdown$.next",{"_index":372,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointerdown$.pip",{"_index":176,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointermove$.complet",{"_index":344,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointermove$.next",{"_index":369,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointerup",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointerup$.complet",{"_index":345,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.pointerup$.next",{"_index":377,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.addclass",{"_index":265,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.appendchild",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.createel",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.createtext",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.listen",{"_index":353,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.listen(scrollcontain",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.removeclass",{"_index":315,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.setattribute(globaldragstyl",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.setstyl",{"_index":274,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.setstyle(el",{"_index":411,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.renderer.setstyle(this.element.nativeel",{"_index":404,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontain",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.activelongpressdrag",{"_index":384,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.disablescrol",{"_index":435,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.elementref.nativeel",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.elementref.nativeelement.getboundingclientrect",{"_index":499,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrollleft",{"_index":415,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrolltop",{"_index":414,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.enablescrol",{"_index":396,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.hasscrollbar",{"_index":387,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.longpressconfig.delta",{"_index":431,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.scrollcontainer.longpressconfig.dur",{"_index":434,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.setcursor",{"_index":402,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.setcursor(this.dragcursor",{"_index":400,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.setelementstyles(clon",{"_index":281,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.setelementstyles(this.ghostel",{"_index":335,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.shouldbegindrag",{"_index":390,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.showoriginalelementwhiledrag",{"_index":273,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.timelongpress.timerbegin",{"_index":385,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.timelongpress.timerend",{"_index":432,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.unsubscribeeventlisten",{"_index":342,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.validatedrag",{"_index":258,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.vcr.createembeddedview",{"_index":295,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.vcr.remove(this.vcr.indexof(viewref",{"_index":303,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.zone.run",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["this.zone.runoutsideangular",{"_index":351,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["through",{"_index":849,"title":{},"body":{"index.html":{}}}],["throw",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":478,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["timelongpress",{"_index":75,"title":{"interfaces/TimeLongPress.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["timerbegin",{"_index":76,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["timerend",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["todo",{"_index":504,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["top",{"_index":283,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["tort",{"_index":939,"title":{},"body":{"license.html":{}}}],["touch",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["touchcancel",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["touchend",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["touchev",{"_index":74,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["touchmov",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["touchmoveev",{"_index":389,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":392,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":391,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["touchstart",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["transform",{"_index":332,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["transformi",{"_index":235,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["transformx",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["transformy}px",{"_index":334,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["translate(${transformx}px",{"_index":333,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["tri",{"_index":379,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["true",{"_index":93,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["tslint:dis",{"_index":483,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":945,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":840,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unsubscribeeventlisten",{"_index":405,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["until",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["updat",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["updatecach",{"_index":491,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["upgrad",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["valid",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":68,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["valu",{"_index":322,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["vcr",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["version",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":509,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["view",{"_index":601,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["viewcontainerref",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["viewref",{"_index":294,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["viewref.rootnod",{"_index":297,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["visibl",{"_index":275,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["void",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["warranti",{"_index":921,"title":{},"body":{"license.html":{}}}],["way",{"_index":507,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["webkit",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["whether",{"_index":936,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":582,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["width",{"_index":287,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["window",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["window.pagexoffset",{"_index":418,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["window.pageyoffset",{"_index":416,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{}}}],["without",{"_index":902,"title":{},"body":{"license.html":{}}}],["work",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["wors",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["wrote",{"_index":864,"title":{},"body":{"index.html":{}}}],["x",{"_index":10,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["y",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}],["yourself",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/GhostElementCreatedEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"interfaces/TimeLongPress.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n  Modules\n  DragAndDropModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/drag-and-drop.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                DraggableDirective\n                            \n                            \n                                DroppableDirective\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    DraggableDirective\n                            \n                            \n                                    DroppableDirective\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\n@NgModule({\n  declarations: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ],\n  exports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ]\n})\nexport class DragAndDropModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEndEvent.html":{"url":"interfaces/DragEndEvent.html","title":"interface - DragEndEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragEndEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dragCancelled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dragCancelled\n                                    \n                                \n                                \n                                    \n                                        dragCancelled:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragMoveEvent.html":{"url":"interfaces/DragMoveEvent.html","title":"interface - DragMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPointerDownEvent.html":{"url":"interfaces/DragPointerDownEvent.html","title":"interface - DragPointerDownEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragPointerDownEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragStartEvent.html":{"url":"interfaces/DragStartEvent.html","title":"interface - DragStartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragStartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cancelDrag$\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelDrag$\n                                    \n                                \n                                \n                                    \n                                        cancelDrag$:     ReplaySubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReplaySubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDraggable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                ghostElementAppendTo\n                            \n                            \n                                ghostElementTemplate\n                            \n                            \n                                showOriginalElementWhileDragging\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                            \n                                ghostElementCreated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        The css class to apply when the element is being dragged\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:131\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                    \n                        The axis along which the element is draggable\n\n                            \n                            Type :    DragAxis\n\n                            \n                        \n                            Default value : { x: true, y: true }\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:95\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                    \n                        The cursor to use when dragging the element\n\n                            \n                            Type :    string\n\n                            \n                        \n                            Default value : ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:125\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                    \n                        Snap all drags to an x / y grid\n\n                            \n                            Type :    SnapGrid\n\n                            \n                        \n                            Default value : {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:101\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                    \n                        an object of data you can pass to the drop event\n\n                            \n                            Type :    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:89\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : true\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:107\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementAppendTo\n                    \n                    \n                        The element the ghost element will be appended to. Default is next to the dragged element\n\n                            \n                            Type :    HTMLElement\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:137\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementTemplate\n                    \n                    \n                        An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n\n                            \n                            Type :    TemplateRef\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:143\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showOriginalElementWhileDragging\n                    \n                    \n                        Show the original element when ghostDragEnabled is true\n\n                            \n                            Type :    boolean\n\n                            \n                        \n                            Default value : false\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:113\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                            \n                            Type :    ValidateDrag\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:119\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                    \n                        Called after the element is dragged\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:175\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                    \n                        Called when the element is being dragged\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:169\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:149\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event.\nIf you call $event.cancelDrag$.emit() it will cancel the current drag\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:157\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementCreated\n                    \n                    \n                        Called after the ghost element has been created\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:163\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropEvent.html":{"url":"interfaces/DropEvent.html","title":"interface - DropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dropData\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                    \n                                \n                                \n                                    \n                                        dropData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mwlDroppable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragOverClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        draggableHelper\n                                                  \n                                                        \n                                                                    DraggableHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scrollContainer\n                                                  \n                                                        \n                                                                    DraggableScrollContainerDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        Added to the element any time a draggable element is being dragged\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOverClass\n                    \n                    \n                        Added to the element when an element is dragged over it\n\n                            \n                            Type :    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:43\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                    \n                        Called when a draggable element starts overlapping the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                    \n                        Called when a draggable element stops overlapping the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                    \n                        Called when a draggable element is moved over the element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:67\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                    \n                        Called when a draggable element is dropped on this element\n\n                        $event Type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:73\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentDragSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentDragSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GhostElementCreatedEvent.html":{"url":"interfaces/GhostElementCreatedEvent.html","title":"interface - GhostElementCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GhostElementCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        element\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                    \n                                \n                                \n                                    \n                                        element:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        x\n                                \n                                \n                                            Optional\n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimeLongPress.html":{"url":"interfaces/TimeLongPress.html","title":"interface - TimeLongPress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimeLongPress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        timerBegin\n                                \n                                \n                                        timerEnd\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        timerBegin\n                                    \n                                \n                                \n                                    \n                                        timerBegin:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerEnd\n                                    \n                                \n                                \n                                    \n                                        timerEnd:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nexport interface TimeLongPress {\n  timerBegin: number;\n  timerEnd: number;\n}\n\nexport interface GhostElementCreatedEvent {\n  clientX: number;\n  clientY: number;\n  element: HTMLElement;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  private timeLongPress: TimeLongPress = { timerBegin: 0, timerEnd: 0 };\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // fix for https://github.com/mattlewis92/angular-draggable-droppable/issues/61\n        // stop mouse events propagating up the chain\n        if (pointerDownEvent.event.stopPropagation && !this.scrollContainer) {\n          pointerDownEvent.event.stopPropagation();\n        }\n\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(({ clientX, clientY, x, y }) => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit({\n                clientX: clientX - x,\n                clientY: clientY - y,\n                element: clone\n              });\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.scrollContainer) {\n      try {\n        event.preventDefault();\n      } catch (e) {}\n    }\n    let hasContainerScrollbar: boolean;\n    let startScrollPosition: any;\n    let isDragActivated: boolean;\n    if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n      this.timeLongPress.timerBegin = Date.now();\n      isDragActivated = false;\n      hasContainerScrollbar = this.scrollContainer.hasScrollbar();\n      startScrollPosition = this.getScrollPosition();\n    }\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          if (\n            this.scrollContainer &&\n            this.scrollContainer.activeLongPressDrag &&\n            !isDragActivated &&\n            hasContainerScrollbar\n          ) {\n            isDragActivated = this.shouldBeginDrag(\n              event,\n              touchMoveEvent,\n              startScrollPosition\n            );\n          }\n          if (\n            !this.scrollContainer ||\n            !this.scrollContainer.activeLongPressDrag ||\n            !hasContainerScrollbar ||\n            isDragActivated\n          ) {\n            this.pointerMove$.next({\n              event: touchMoveEvent,\n              clientX: touchMoveEvent.targetTouches[0].clientX,\n              clientY: touchMoveEvent.targetTouches[0].clientY\n            });\n          }\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n      if (this.scrollContainer && this.scrollContainer.activeLongPressDrag) {\n        this.scrollContainer.enableScroll();\n      }\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n\n  private shouldBeginDrag(\n    event: TouchEvent,\n    touchMoveEvent: TouchEvent,\n    startScrollPosition: any\n  ): boolean {\n    const moveScrollPosition = this.getScrollPosition();\n    const deltaScroll = {\n      top: Math.abs(moveScrollPosition.top - startScrollPosition.top),\n      left: Math.abs(moveScrollPosition.left - startScrollPosition.left)\n    };\n    const deltaX =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientX - event.touches[0].clientX\n      ) - deltaScroll.left;\n    const deltaY =\n      Math.abs(\n        touchMoveEvent.targetTouches[0].clientY - event.touches[0].clientY\n      ) - deltaScroll.top;\n    const deltaTotal = deltaX + deltaY;\n    if (\n      deltaTotal > this.scrollContainer.longPressConfig.delta ||\n      deltaScroll.top > 0 ||\n      deltaScroll.left > 0\n    ) {\n      this.timeLongPress.timerBegin = Date.now();\n    }\n    this.timeLongPress.timerEnd = Date.now();\n    const duration =\n      this.timeLongPress.timerEnd - this.timeLongPress.timerBegin;\n    if (duration >= this.scrollContainer.longPressConfig.duration) {\n      this.scrollContainer.disableScroll();\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n4.2.0 (2019-03-17)\nFeatures\n\nexpose ghost element and starting mouse position on ghost element created event (d233788), closes #81 #85\n\n\n4.1.0 (2019-02-17)\nBug Fixes\n\nallow angular 8 peer dependency (f936805)\n\nFeatures\n\ndraggable-scroll-container: Added input activeLongPressDrag (#79) (f98f586), closes #78\n\n\n4.0.2 (2018-09-18)\nBug Fixes\n\ninclude readme and licence in npm (cfff617)\n\n\n4.0.1 (2018-09-01)\nBug Fixes\n\nallow draggable elements insider other draggable elements to be dragged (700fef1), closes #61\n\n\n4.0.0 (2018-08-29)\nBug Fixes\n\naccount for the window being scrolled whilst dragging (566bf78)\nallow dragging the element inside a scrollable container (6e0a1a3), closes #25\nalways remove global styles when clicking draggable elements (c428eed), closes #44\nappend the ghost element to the body (4f23661)\nbump up z-index of element being dragged (9d0f754)\ndon't fire drop events when the droppable element is scrolled out of the view (4c9224b)\ndon't highlight text when dragging elements (67d3a5e), closes #28\nmaintain old ghost element behaviour by default (cf1bc61)\npreserve original element styles after dragging (f36ed2d)\nremove automatic pointer-events:none on dragged element (bfe9bb4)\nremove margin on the ghost element (06396e6)\nremove the drag helper provider from the public api (48d4fe6)\nround snap grids so dragging from each side is even (fa8434b)\nset dimensions and z-index on ghost element (9b5a6b0)\ndragCursor: don't default the drag cursor to move (0a95ac7)\ndroppable: correctly account for scroll events when dragging elements (c5ef775), closes #23\ndroppable: dont throw when immediately destroying the directive (dd3e89e)\n\nFeatures\n\ndragActiveClass: add class when dragging element (ee1d06c)\ndragCancel$: allow the drag to be cancelled (538f9b7), closes #30\ndraggable: add option to show the original element while dragging (d010733)\ndragOverClass: add a class when an element is dragged over it (76852bc)\ndroppable: add css class when any element is being dragged (5995f81)\nadd a way of setting the scroll container if not the window (9831d36)\nghostElementAppendTo: allow the ghost element parent to be customised (f51214e)\nghostElementCreated: emit new event after the ghost element is created (22530b9)\nghostElementTemplate: allow changing the ghost element contents (ecc96ec)\nexpose interfaces for all events (c174023)\nremove the DragAndDropModule.forRoot method (5ae52a7)\n\nPerformance Improvements\n\nderegister scroll listener once drag complete (7e50d74)\nonly recalculate the bounding rectangle once after scrolling (d72e16b)\nonly recompute draggable position on window scroll (f6a5cde)\n\nBREAKING CHANGES\n\nThe DragAndDropModule.forRoot method was removed. To migrate just import the\nDragAndDropModule module directly\nthe drag helper provider is now no longer exported as part of the public api, just\nremove it from your code to migrate\nA cloned element is now created when the element is being dragged, and the dragged\nelement is set to be positioned fixed. This may break some apps in some edge cases.\nThe dragStart $event.x and $event.y values were removed as these were always\n0\npointer-events:none is no longer automatically applied to elements while they are being dragged. To migrate use the dragActiveClass option and set this yourself with css\ndragCursor: The drag cursor will no longer be set to move by default, to restore the\nbehaviour set dragCursor=\"move\" or use CSS on the draggable elements to change the cursor\n\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : >=6.0.0 \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            isCoordinateWithinRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \nisCoordinateWithinRectangle(clientX: undefined, clientY: undefined, rect: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        rect\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 6.0+ drag and drop\n\n\n\n\n\n    \n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 6.0+\nInstallation\nInstall through npm:\nnpm install --save angular-draggable-droppableThen use it in your app like so:\nimport { Component, NgModule } from '@angular/core';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\n\n@NgModule({\n  declarations: [DemoApp],\n  imports: [DragAndDropModule],\n  bootstrap: [DemoApp]\n})\nclass DemoModule {}\n\n@Component({\n  selector: 'demo-app',\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nAlternatives\nI wrote this library because I needed drag and drop whilst snapping to a grid. If you don't need this feature then I recommend checking out one of these other awesome drag and drop libraries:\n\nAngular CDK drag and drop\nangular-skyhook\nng-drag-drop\n\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (projects/.../draggable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        ValidateDrag\n                    \n                \n                \n                    \n                        ValidateDrag:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
